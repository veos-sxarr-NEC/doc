2.5
この節は VEOS version 2.4.3 から 2.5 の変更を記載しています。

概要   : RHEL8.1/x86_64サポート
タイプ : 機能拡張
詳細   : RHEL8.1/x86_64 が新たにサポートされました。サポートしている
         プラットフォームとオペレーティングシステムについては README を
         参照してください。

概要   : VH プログラム向けの不要なアーカイブファイルと libtool アーカイブ
         の削除
タイプ : 機能拡張
詳細   : 開発パッケージから VH プログラム向けのアーカイブファイル(.a)
         と libtool アーカイブ(.la)を削除しました。VH プログラムは
         ライブラリに動的リンクされるため、これらのファイルは不要です。
         VE プログラム向けのアーカイブファイルと libtool アーカイブは、
         従来通り、提供されます。

概要   : VEOSのコアファイルのサイズ制限を１GBに変更
タイプ : 機能拡張
詳細   : VEOSのコアファイルのサイズ制限を無制限から１GBに変更しました。

概要   : VEO のログメッセージ改善
タイプ : 機能拡張
詳細   : veo_load_library() の失敗の原因が VEO のログファイルに記録されます。

概要   : 新しいコンテキストを有効にした後にVEスレッドがアボートする問題の修正
タイプ : バグ修正
詳細   : 新しいコンテキストがmakecontext() APIによって先に変更されていた場合、
         そのコンテキストをswapcontext()を利用して有効にした後
         VEスレッドはアボートします。

概要   : スワップアウトされたプロセスが存在する場合に VE プログラムの性能が
         低下する場合がある問題の修正
タイプ : バグ修正
詳細   : プロセスまたはスレッドの作成時に "Partial Process Swapping" によって
         スワップアウトされたプロセスが存在する場合、プロセス生成アルゴリズムが
         適切ではないために、2つの実行中のスレッドに同じコアが割り当てられる
         可能性があります。
         この場合、VE プログラムのパフォーマンスが低下します。
         ユーザは pidstat コマンドによって、スレッドがどのコアで実行されているか
         を確認できます。

概要   : プロセスをスワップアウトしても負荷調整が行われない問題の修正
タイプ : バグ修正
詳細   : コア数より多くのスレッドが VE 上で動作している場合、VEプログラムの
         性能は著しく低下します。この時、"Partial Process Swapping" でいくつかの
         プロセスをスワップアウトし、実行中のスレッド数をコア数以下に減らしても
         負荷調整が行われず、VE プログラムの性能は改善されません。

概要   : errno が既にセットされている時 clock_gettime() が失敗する問題の修正
タイプ : バグ修正
詳細   : '-no-proginf' オプション付きでコンパイルしたプログラムが、errno が
         非 0 の状態で、初めて clock_gettime() を呼び出すと、clock_gettime()
         は失敗します。

概要   : VEO が共有ライブラリのロードに失敗する場合がある問題の修正
タイプ : バグ修正
詳細   : veo_load_library() は参照されないシンボルの解決ができない場合、
         共有ライブラリのロードに失敗します。

概要   : VH メモリリークの修正
タイプ : バグ修正
詳細   : VE 用 MPI プロセスが他の VE ノードのプロセスとデータを転送する
         場合、少量のメモリがリークする場合があります。


2.4.3
この節は VEOS version 2.4.1 から 2.4.3 の変更を記載しています。

概要   : システムコール処理中に VEOS が異常終了する問題の修正
タイプ : バグ修正
詳細   : VEOS が VE プログラムからのシステムコール要求を処理した後、VE
         コアの実行を開始するときに、意図しないタイムアウトを検出し、
         VEOS が異常終了することがあります。VEOS が異常終了すると、実行
         中のVEプロセスも異常終了します。


2.4.1
この節は VEOS version 2.4 から 2.4.1 の変更を記載しています。

概要   : VEO を介したftrace 機能のサポート
タイプ : 機能拡張
詳細   : 以下の条件がすべて満たされた場合、ftrace のランタイムライブラリ
         によってftrace.out ファイルが生成されます。
         - ユーザが"-ftrace" オプション付きでVE プログラムのリンクとコ
           ンパイルをする。
         - VEO プログラムが veo_proc_destroy() を呼び出す。
         詳しくは、VEOSドキュメント "The tutorial and API reference of 
         veoffload" を参照してください。

概要   : VEO コンテキストのスタックサイズを指定できる新しい VEO API を
         サポート
タイプ : 機能拡張
詳細   : VEO は VEO コンテキストのスタックサイズを属性として指定できる
	 新しい API をサポートしました。 ユーザは新しい API を利用する
         ことで、指定したサイズのスタックを持つ VEO コンテキストを作成
         することができます。 詳しくは、VEOSドキュメント "The tutorial
         and API reference of veoffload" を参照してください。

概要   : veorun のラインタイムライブラリサーチパスの変更
タイプ : 機能拡張
詳細   : veorun は VE 向けの実行バイナリであり、VEO が VE プログラムを
         実行するために利用します。veorun のランタイムライブラリサーチ
         パスを /opt/nec/ve/lib に変更しました。これにより、ユーザが 
         veo_load_library() でロードする共有ライブラリは 'ncc'、'nfort'
         コンパイラの特定のバージョンのランタイムライブラリに依存しなく
         なります。

概要   : clock_gettime() システムコールの性能改善
タイプ : 機能拡張
詳細   : 下記のクロックIDを指定したときの clockgettime() システムコール
         の性能改善を行いました。システム時間の取得のため、プロセスまた
         はスレッドが下記のクロックID を指定して clock_gettime() を実行
         したとき、最初の実行は VH のシステムコールの結果を返します。以
         降の実行では、同じスレッドグループに対しては VH のシステムコー
         ルではなく、VE 側で算出した時刻を返します。

         CLOCK_REALTIME
         CLOCK_REALTIME_COARSE
         CLOCK_MONOTONIC_COARSE
         CLOCK_MONOTONIC_RAW
         CLOCK_BOOTTIME
         CLOCK_THREAD_CPUTIME_ID

概要   : 実行可能な VE プロセスは直ちに VE コアに割り当てるように VEOS
         スケジューラを更新
タイプ : 機能拡張
詳細   : VEOS スケジューラは、実行可能な VE タスクを次のスケジューラの
         タイマーインターバルが来るまで VE コアに割り当てませんでした。
         この機能拡張により、VE コアが他にタスクを実行していない時、
         VEOS スケジューラは実行可能 VE タスクをVE コアに割り当てます。

概要   : スタックリミットを超過したときの VE タスク異常終了処理の変更
タイプ : 機能拡張
詳細   : VEタスクがスタックリミットを超過したとき、"Unable to grow stack"
         のメッセージと共に VE タスクを異常終了するようにしました。

概要   : VE タスクのスタックがスタックリミットを超えて拡張する問題の修正
タイプ : バグ修正
詳細   : スタックリミット内に収まらないサイズのスタック領域を要求された
         場合、VEOS は VE タスクのスタックリミットを超えてスタック領域を
         割り当てます。

概要   : ユーザがジョブスケジューラを通して VEO プログラムを実行した場合
         に VEO プロセスの作成に失敗する場合がある問題の修正
タイプ : バグ修正
詳細   : 以下の条件がすべて満たされた場合、VEO プロセスの作成に失敗する
         場合があります。
         - ユーザがジョブスケジューラを通じて VEO プログラムを実行する。
         - 上記の VEO プログラムが veo_proc_create_static() を呼び出す。

概要   : VEOS シャットダウン中の異常終了の修正
タイプ : バグ修正
詳細   : シャットダウン中に無効または削除済みのタスクのデータにアクセス
         し VEOS が異常終了することがあります。


2.4
この節は VEOS version 2.3 から 2.4 の変更を記載しています。

概要   : VEのFortranプログラム向けVH Call APIのサポート
タイプ : 機能拡張
詳細   : VH Call は VE プロセスから VH 用にコンパイルされた共有ライブ
         ラリ関数を呼び出すための機能です。ユーザはこのAPIを使ってVHの
         Fortranライブラリの関数、サブルーチンを呼び出すことができます。
         詳細は VEOS のドキュメント "The tutorial and API reference of
         libvhcall-fortran" を参照してください。


2.3
この節は VEOS version 2.2.2 から 2.3 の変更を記載しています。

概要   : 共有メモリのRSS値の計算アルゴリズムの変更
タイプ : 機能拡張
詳細   : 複数のVEプロセスによってVEのメモリが共有される際、VEOSはプロ
         セス間で、共有されるメモリサイズを分割します。 分割された値は
         各プロセスのRSS(resident set size)に計上されます。

概要   : 資源制限をセットするための環境変数VE_LIMIT_OPTの追加とRSS制限のサポート
タイプ : 機能拡張
詳細   : 環境変数VE_LIMIT_OPTによりVEプロセスの資源制限をセットすること
         が出来ます。  詳しくは、VEOSドキュメント "How to execute VE 
         program" を参照してください。
         プロセスがRSS制限を超過した場合、メモリ割り当てが失敗するよう
         になります。

概要   : Partial Process Swapping機能のサポート
タイプ : 機能拡張
詳細   : 停止中VEプロセスのメモリの一部をVH側に確保したHugePagesに退
         避し、VEメモリを解放する機能を提供します。その解放されたVE
         メモリは別のプログラムから利用可能です。VH側に退避したメモリ
         をVEメモリに復元し、VEプロセスをメモリ退避前の状態に戻す機能
         を提供します。 使用方法はVEOSのドキュメント "VEOS Partial 
         Process Swapping リファレンス"を参照してください。

概要   : GDBの機能拡張
タイプ : 機能拡張
詳細   : 以下の機能強化があります。
         - GDBのバージョンを7.11.1から7.12.1に更新しました。
         - コマンドが追加されます。
         VEOS のドキュメント"GDBの相違点"を参照してください。

概要   : 環境変数VE_ACC_IOのサポート
タイプ : 機能拡張
詳細   : VE_ACC_IOに1をセットすることで、プロセスのI/Oオフロード方式を
         高速I/Oに切り替えることが出来ます。また、VE_ACC_IOを削除する
         ことで、高速I/Oを無効にすることが出来ます。

概要   : VEO APIで作られたVEプロセスとその統計情報のコマンドによる表示
         をサポート
タイプ : 機能拡張
詳細   : VH 側の子スレッドからVEO APIによってVEプロセスを生成した際、
         'ps', 'top', 'pidstat', 'prtstat', 'pmap' コマンドによって
         VEプロセスの情報を表示できるようにしました。

概要   : VH Call向け新規データ転送APIのサポート
タイプ : 機能拡張
詳細   : VH Call で実行された関数から生成された VH 側スレッドから、VH 側
         の関数を呼び出した VE 側スレッドのメモリに対して、データを送受信
         することができます。

概要   : VE の GDB によるコアファイルの調査時に子スレッドではなくメイン
         スレッドの情報を表示する問題の修正
タイプ : バグ修正
詳細   : VEのGDBによるコアファイルの調査時に、子スレッドがプロセス終了を
         引き起こしたとしても、メインスレッドの情報が表示されます。これは
         VEOSが常に現在実行されているスレッドとして親スレッドをマークして
         いたためです。

概要   : ゾンビ状態 ('Z') のメインスレッドに SIGSTOP が送られた際、 子
         スレッドの状態が停止('T')に遷移しない問題の修正
タイプ : バグ修正
詳細   : ゾンビ状態('Z')のインスレッドにSIGSTOPが送られた際、スレッド
         グループ内の子スレッドの状態が停止('T')に遷移しません。

概要   : VEO を使用するプログラムにシグナルが配送されない問題の修正
タイプ : バグ修正
詳細   : veo_proc_create() の後、すべてのシグナルがマスクされるため、
         VEO を使用するプログラムにシグナルが配送されません。

概要   : VEO によって実行されたプログラムが SIGCONT で再開しない問題
         の修正
タイプ : バグ修正
詳細   : SIGSTOP から実行を再開するには SIGCONT を VEOS に通知する必要が
         あります。しかし libveo は SIGCONT を VEOS に通知していなかった
         ため、 SIGCONT で VEO を使用するプログラムの VE 部分が再開され
         ませんでした。


2.2.2
この節は VEOS version 2.2 から 2.2.2 の変更を記載しています。

概要   : VEO OpenMP プログラムの負荷均衡
タイプ : 機能拡張
詳細   : VE コア数を超えるスレッドが生成されたとき、 VEO は OpenMP
         スレッドとの衝突を避けるようにアフィニティを自動的に設定し
         ます。静的リンクの veorun バイナリを使用している場合は、
         mk_veorun_static で同バイナリを再生成してください。

概要   : VEO コンテキストスレッド上での VH 関数呼び出しをサポート
タイプ : 機能拡張
詳細   : VEO はVHの関数を VEO コンテキスト上で実行する新しい API 関数
         veo_call_async_vh() をサポートします。

概要   : マルチスレッドの VE プロセスにおいて fork() がハングアップ
         する問題の修正
タイプ : バグ修正
詳細   : マルチスレッドの VE プロセスが fork() を実行し、それと同時に
         他のスレッドが、開始アドレスまたはサイズが 8 バイト境界では
         ない read() の I/O を行った場合、fork() はハングアップします。

概要   : VEO による 64 ビット未満の引数を持つ VE 関数呼び出しが未定義
         動作する問題の修正
タイプ : バグ修正
詳細   : VEO は引数を符合拡張またはゼロ拡張せずに渡していたため、 64 
         ビットより小さい整数引数の上位ビットが未定義です。この未定義
         より、そのような整数引数を持つ VE 関数呼び出しが未定義動作と
         なります。


2.2
この節は VEOS version 2.1.3 から 2.2 の変更を記載しています。

概要   : 命令キャッシュ性能の改善
タイプ : 機能拡張
詳細   : VE コアの命令キャッシュ性能を改善するため、VE プロセスのメモリ
         レイアウトを変更しました。この変更は VE プログラムの性能改善に
         つながります。
         新しいメモリレイアウトは、テキストセクションとデータセクション
         の間に 1024 バイト以上の空間が必要です(実行ファイルまたは共有
         ライブラリで定義されます)。もし空間が 1024 バイト以下の場合、
         "Failed to validate the gap between text/data" のエラーメッ
         セージと共にロードは失敗します。そのような場合は、実行ファイル
         または共有ライブラリを再リンクしてください。
         've_validate_binary' コマンドは、空間サイズをチェックできます。
         詳細は次のトピックを参照してください。

概要   : 新コマンド ve_validate_binary
タイプ : 機能拡張
詳細   : 新しいコマンド /opt/nec/ve/bin/ve_validate_binary が追加されま
         した。このコマンドは、実行バイナリと共有ライブラリのテキスト
         セクションとデータセクションの間のサイズを確認します。もし空間
         サイズが 1024 バイト以下の場合、次のメッセージが表示されます。
         "DATA/TEXT gap is less: <size>"

概要   : HW 例外に対応して、シグナルハンドラの実行中にセットされる 
         si_code について値を更新
タイプ : 機能拡張
詳細   : シグナルハンドラ起動時に引数として渡される siginfo_t 構造体の
         si_code を更新しました。以下は更新された si_code と対応する
         HW 例外のリストです。

          HW exceptions                         si_code
          Missing page exception                'SEGV_MAPERR'
          Memory access exception               'BUS_ADRALN'
          Host missing page exception           'SEGV_MAPERR'
          Host missing space exception          'SEGV_MAPERR'
          I/O access exception                  'BUS_ADRERR'
          Illegal instruction format exception  'ILL_ILLOPC'

概要   : VE ノード番号の明示的な指定を不要にする VEO API の改善
タイプ : 機能拡張
詳細   : ユーザーは VE ノード番号としてveo_proc_create() や
         veo_proc_create_static() に -1 を指定できます。-1 が指定された
         場合、VE プロセスはデフォルトのVE ノード上に作成されます。-1 
         が指定され環境変数VE_NODE_NUMBER が設定されている場合、VE プロ
         セスはVE_NODE_NUMBER で指定された VE ノード上に作成されます。

概要   : ジョブスケジューラのための VEO API の改善
タイプ : 機能拡張
詳細   : ユーザーがジョブスケジューラを通して VEO API を使う プログラム
         を実行する場合、プログラムによって指定されるVEノード番号は論理
         番号として扱われ、ジョブスケジューラよって割り当てられた物理
         VE ノード番号に変換されます。例えば、プログラムが VE ノード番
         号に 0 を指定し、ジョブスケジューラが VEノード #4, #5, #6 を割
         り当てた場合は、VE ノード #4 でVEプロセスが生成されます。

概要   : GDBの機能拡張
タイプ : 機能拡張
詳細   : 以下の機能強化があります。
         - GDBは、実行バイナリのパスを指定しなくても、VEプロセスにアタッ
           チするすることができます
         - GDBは"target"と"target core"コマンドをサポートします
         - GDBは入力/出力リダイレクションを使用することができます。

概要   : ジョブスケジューラによるVEノードの割り当てのチェック
タイプ : 機能拡張
詳細   : VEOSが、ジョブスケジューラによるVEノードの割り当てをチェックし
         ます。ジョブ・スケジューラがVEノードを一つも割り当てていない場
         合は、VEプログラムの実行が失敗します。ジョブスケジューラを使わ
         ずに、直接VEプログラムを実行した場合は、割り当てのチェックは行
         われずに、VEプログラムが実行されます。

概要   : 例外発生後に新しいリクエストがリクエストキューに入れられる
         問題の修正
タイプ : バグ修正
詳細   : VEO APIを使って呼び出された関数が例外を発生させた場合、
         同一のコンテキストを使って関数を実行することができなくなり
         ます。例外発生後、発行された新しいリクエストはリクエスト
         キューに入れられます。ユーザーがリクエストの結果を待ち合わせる
         と該当のコンテキストは受け付けた新しいリクエストを実行しない
         ため、VEO APIがハングアップしたようになります。

概要   : 終了した孤児 VE プロセスの VE メモリについて、その親 VE プロ
         セスが VE 用 time コマンドで実行されていた場合、解放されない
         問題の修正
タイプ : バグ修正
詳細   : VE 用 time コマンドで実行された親 VE プロセスが子プロセスより
         も先に終了した場合、孤児 VE プロセスの終了後 VE メモリが解放
         されません。

概要   : ネイティブ環境を参照する時、ロケールに関連する API がエラーを
         返す問題の修正
タイプ : バグ修正
詳細   : ロケールに関連する API を使用している VE プロセスが LANG 環境
         変数で指定されたネイティブ環境 (eg. LANG=en_GB.UTF-8, 
         LANG=en_US.UTF-8) を参照すると、エラー ENOENT を返します。

概要   : GDBが"backtrace"コマンドでglibcの関数を表示できない問題を修正
タイプ : バグ修正
詳細   : GDBが"backtrace"コマンドを実行した場合に、glibcの関数を正しく
         表示することができません。

概要   : GDBが不正なベクトルレジスタを取得するのを修正
タイプ : バグ修正
詳細   : GDBが正しくベクトルレジスタを扱わないため、GDBが
         ベクトルレジスタを表示すると、不正な値が表示されます。

概要   : __FE_DENORM マクロの利用で意図しない動作を起こす問題の修正
タイプ : バグ修正
詳細   : VE は デノーマル数をサポートしていないため、__FE_DENORM マクロ
         を利用すると意図しない動作を起こします。そのため、__FE_DENORM
         マクロを削除しました。


2.1.3
この節は VEOS version 2.1 から 2.1.3 の変更を記載しています。


概要   : gettimeofday() の引数 timezone を指定した時の性能を改善
タイプ : 機能拡張
詳細   : gettimeofday() の引数に timezone が指定されたとき、初回の
         呼び出しはシステムコールを起動しますが、それ以降の呼び出しでは
         VE 側でタイムゾーンを返す関数を起動するようにしました。これ
         は gettimeofday() の性能を改善します。

概要   : VH 側の子スレッドからの VEO API 呼び出しをサポート
タイプ : 機能拡張
詳細   : VH 側の子スレッドから VEO API を呼び出して、VE プロセスを生成
         できるようにしました。VE プロセスが VH 側の子スレッドから生成
         された場合は、VE DMA とVH-VE SHM API は利用できません。

概要   : 16ビットと8ビットの整数と符号なし整数の引数をセットできる
         新しいVEO API をサポート
タイプ : 機能改善
詳細   : VEO は16ビットと8ビットの整数、符号なし整数をセットできる
         新しいVEO API をサポートしました。
         ユーザはVEO のAPI を使うことによってveo_args に16ビットの
         整数、符号なし整数、8ビットの整数、符号なし整数をセット
         できるようになったため、VE プロセスへ4種の整数を渡すことが
         できます。

概要   : Fortran で記述されたVE プログラムをサポート(VEO)
タイプ : 機能改善
詳細   : Fortran で実装したライブラリを、4倍精度実数と可変長文字列の
         引数と返り値を除き、サポートしました。

概要   : シンボルを公開しない静的ライブラリのリンクのサポート (VEO)
タイプ : 機能拡張
詳細   : ユーザが静的 veorun を作成する際、mk_veorun_static の新しい
         --link-nosym オプションを指定することで、シンボルを公開しない
         静的ライブラリをリンクできるようになりました。
         本機能は、BLAS などの大きなライブラリに依存するプログラムの
         消費メモリ削減、プロセス起動やシンボル検索を高速化します。

概要   : VE プロセス生成の性能を改善
タイプ : 機能拡張
詳細   : VE プログラムのロード高速化のため、VE プロセスのロード機能の
         最適化を行いました。また、割り当てられたコアがアイドル状態だっ
         た場合、ただちにプロセスを実行するように、スケジューリング機能
         の改善を行いました。

概要   : 新しく生成した VE プロセスの PPID に VE プロセスを生成した
         プロセスの PID を表示するために、 アカウンティングファイルの
         PPID の値を変更
タイプ : 機能拡張
詳細   : ve_exec や VE 用コマンド(taskset, prlimit, time, strace 等) に
         よって実行された VE プロセスについて、 dump-acct コマンドが
         表示する PPID に '1' ではなく 'VE プロセスを生成したプロセスの
         PID' を表示するようにしました。

概要   : VE プロセスが system() を実行して生成した VH プロセスが終了
         するまで、VE プロセスのメモリが解放されない system() の問題を
         修正
タイプ : バグ修正
詳細   : VE プロセスが system() を呼び、VH プロセスをバックグラウンド
         で実行した場合 (例: system("/bin/sleep 180 &"))、VE プロセスが
         終了していたとしても、system()で生成sされた VHプロセスが終了
         するまで VE プロセスのメモリ資源は解放されません。

概要   : system() の 'command' 引数で示される入力文字列が破壊される
         問題の修正
タイプ : バグ修正
詳細   : VE プログラムが system(command) を実行した時、 system() の
         意図しない動作を引き起こす余分な文字が command 引数の文字列に
         追加される場合があります。

概要   : gettimeofday() を呼び出してから 1 時間以上後に gettimeofday()
         を呼び出した時、誤った'timeval' 構造体の値が返却される問題の
         修正
タイプ : バグ修正
詳細   : VE プログラムが gettimeofday() を呼び出し、1時間以上後に再び
         gettimeofday() を実行した場合、'timeval' 構造体に誤った値が
         入れられて返却されます。

概要   : setitimer() でタイマを無効にしている最中にタイマが満了した場合
         の SIGALARM 配送の問題を修正
タイプ : バグ修正
詳細   : VE プロセスが登録済みのタイマを無効にするために setitimer() を
         実行した時に同時にタイマが満了した場合、SIGALARM シグナルは
         setitimer() から戻った後に VE プロセスに配送されます。
         setitimer() の実行中でも SIGALARM がされるように修正されます。

概要   : VE AIOで読み込んだデータが不正になる問題の修正
タイプ : バグ修正
詳細   : ve_aio_read()を多重に実行する場合、以下の条件のどちらかが成立
         するとデータ化けを起こす場合があります。
         - VE側バッファの開始アドレスが8 の倍数でない
         - VE側バッファのサイズが8の倍数でない

概要   : libveosinfo ライブラリを使う VEO プログラムが異常終了する問題の修正
タイプ : バグ修正
詳細   : VE および VEOS の情報取得ライブラリ 'libveosinfo' とリンクした VEO
         プログラムが、代理プロセスを構成する libvepseudo ライブラリ (VEO が
         使用) とのシンボル衝突により、プログラムが意図せずクラッシュすること
         がありました。衝突を回避するため、 libvepseudo の内部関数・変数の
         シンボルを非公開にしました。
         
概要   : NOSUID でマウントされているディレクトリ上の静的リンクした
	 veorun を実行できない問題の修正
タイプ : バグ修正
詳細   : "nosuid" オプション付きでマウントされているファイルシステム上に
	 ある実行ファイルで静的リンクしたveorun を使うと失敗します。

概要   : VEO のリクエストがストールする問題の修正
タイプ : バグ修正
詳細   : VEO API を使って呼び出された関数が例外を発生させた場合、
         同一のコンテキストを使って関数を実行することができなくなります。
         しかし非同期のVEO API を使って関数を呼び出していた場合、
         VEO ライブラリの中で競合状態が発生すると、例外を発生させた
         コンテキストが新たな要求を受け付ける場合があります。
         その場合、該当のコンテキストは受け付けた要求を実行しないため、
         要求に対して払い出されたリクエストID を使って結果を待ち合わせると、
         VEO API がハングアップしたようになります。

概要   : VE プロセスのスタック領域の権限が'PROT_WRITE'である問題の修正
タイプ : バグ修正
詳細   : VE 用 pmap コマンドが VE プロセスのスタック領域の権限を
         'PROT_WRITE|PROT_READ' ではなく'PROT_WRITE' と表示します。

概要   : VE 用 strace コマンドでトレースしているプロセスが execve() 
         システムコールを実行した時、strace コマンドが失敗する問題の修正
タイプ : バグ修正
詳細   : トレースしている VE プロセスが execve() システムコール、または
         exec() 系の機能を呼んだ場合、strace コマンドがエラー 
         "Bad address" を表示して終了します。

概要   : 'strings.h' をインクルードしているユーザプログラムを 'nc++' 
         コンパイラで '-U__GNUC_MINOR__' を指定してコンパイルした場合に
         エラーになる問題の修正
タイプ : バグ修正
詳細   : 'strings.h' をインクルードしているユーザプログラムを 'nc++'
         コンパイラで '-U__GNUC_MINOR__' を指定してコンパイルした場合に
         コンパイラがエラーを返します。

概要   : VH Callを利用するプログラムのコンパイル時に警告やエラーが出る
         問題の修正
詳細   : vhcall_args_alloc()を利用するCプログラムをコンパイルすると警告
         がでます。-std=c11オプション指定する、もしくはC++プログラムとし
         てコンパイルする場合はエラーになります。


2.1
この節は VEOS version 2.0.3 から 2.1 の変更を記載しています。

概要   : NUMA モードのサポート
タイプ : 機能拡張
詳細   : VE カード (HW) のパーティショニングモードが利用可能になるのに
         ともない、パーティショニングモードを制御するために VEOS NUMA 
         モードを提供します。パーティショニングモードのとき、ユーザは 
         VE カードを NUMA の様に扱う事が出来ます。使用方法は VEOS の
         ドキュメント"VE プログラムの実行方法"を参照してください。

概要   : VE Offload機能 (VEO) のサポート
タイプ : 機能拡張
詳細   : VEO はVE 上でアクセラレータプログラミングを提供します。VEO は
         VH 上のメインプログラムから VE プログラムの実行を制御します。
         VEO を用いて、VE とVH 両方の計算資源を使うプログラムを開発する
         ことができます。詳細は VEOS のドキュメント "The tutorial and 
         API reference of veoffload" を参照してください。

概要   : VH Call API の引数渡し改善
タイプ : 機能拡張
詳細   : VH Call は VE のプロセスから VH 用にコンパイルされた共有ライブ
         ラリ関数を呼び出すための機能です。この改善で任意の個数、任意の
         型の引数渡しを伴う関数呼び出しが可能になります。また、改善され
         た API を用いて Fortran ライブラリの関数を呼び出すことも可能で
         す。詳細は VEOS のドキュメント "The tutorial and API reference 
         of libsysve" を参照してください。

概要   : VE 用 glibc 'ldd' コマンドのサポート
タイプ : 機能拡張
詳細   : ldd は VE アーキテクチャ用のダイナミックリンクのバイナリが要求
         する共有ライブラリを表示します。

概要   : Infiniband 環境での 高速 I/O のサポート
タイプ : 機能拡張
詳細   : Infiniband 環境での高速 I/O をサポートされました。VEOS のドキュ
         メント"VEプログラムの実行方法"を参照してください。

概要   : VE_NODE_NUMBER 環境変数がセットされていない場合、VE ノード '0'
         を使うように複数のコマンドの動作を変更
タイプ : 機能拡張
詳細   : VE_NODE_NUMBER 環境変数によってどのノードも指定されていない時、
         以下のコマンドはデフォルトで VE ノード '0' を使います。
          - tload, top (オプションにかかわらず)
          - iostat, mpstat, pidstat, sadc, sadf, sar, vmstat, free
            (delay/interval/count オプションを指定した場合)
          - accton (ファイル名を指定した場合)
          - sa ('--other-usracct-file/--other-savacct-file/
                 --other-acct-file' オプションを指定した場合)
          - taskset, prlimit, time, strace (プロセスを起動する場合)

概要 	: VE-VH間のデータ転送性能の向上 
タイプ 	: 機能拡張 
詳細 	: VE-VH間データ転送におけるVEドライバ処理の効率化を行いました。
	  この効率化により、read()/write()システムコール等のVE-VH間の
	  データ転送性能が向上します。

概要   : VEOSが作成するログファイルの名前を、VE ノード番号を含むように改善
タイプ : 機能拡張
詳細   : VEOS が作成するログファイルの名前を、 veos.log.X から
         veosN.log.X に変更しました(N は VE ノード番号で、X は通し番号
         です)。ログファイルが保存されるディレクトリは
         /var/opt/nec/ve/veos から変更はありません。

概要   : musl-libc 関連のパッケージの削除
タイプ : 機能拡張
詳細   : NEC が VE 向けの musl-libc のサポートを終了したため、 musl-libc
         関連パッケージを削除しました。削除したパッケージは次の通りです。
            musl-libc-ve musl-libc-ve-devel libsysve-musl
            libsysve-musl-devel veos-musl-header
         これらがインストールされている場合は、アンインストールをお願い
         します。

概要   : VE プロセスの環境変数に常に VE_NODE_NUMBER をセットするように
         execve() システムコールを改善
タイプ : 機能拡張
詳細   : execve() の envp (第三引数) に NULL が指定された場合でも、
         環境変数 VE_NODE_NUMBER が設定されるように execve() の機能を
         改善しました。プロセスが実行される VE ノード番号は
         VE_NODE_NUMBER によって決定されます。

概要   : C++プログラムのためのlibsysveヘッダファイル更新
タイプ : 機能拡張
詳細   : C++ ユーザプログラムがインクルードするために、 ヘッダファイル 
         libvhcall.h, veaio.h, vedma.h, vhshm.h を更新しました。

概要   : glibc 内の I/O バッファ割り当て方法を変更
タイプ : 機能拡張
詳細   : ファイル I/O API (fread()/fwrite()等) は I/O バッファ を 
         無名ページからではなく、ヒープから取得します。

概要   : VE プロセスの開始時間、経過時間、ユーザ時間の計算アルゴリズム
         の改善
タイプ : 機能拡張
詳細   : 経過時間、ユーザ時間の単位を VH と同じになるように、計算アル
         ゴリズムを改善しました。また、VE プロセスの開始時間を execve() 
         実行後も引き継ぐように改善しました。

概要   : VE 用コマンドと getppid() の間で PPID 値に違いが出ないように
         VE 用コマンドの機能を更新
タイプ : 機能拡張
詳細   : 従来 VE 用コマンドは ve_exec で起動された VE プロセスの PPID 
         に 1 を表示していました。'top', 'ps', 'prtstat' コマンドは VE 
         プロセスの PPID に、そのプロセスを起動したシェルの PID を表示
         するようになります。また、その挙動を getppid() システムコール
         と一致させました。

概要   : 共有メモリマップドファイルのデータがファイルに書き戻されない
         問題の修正
タイプ : バグ修正
詳細   : 'MAP_SHARED' フラグと'PROT_WRITE'権限を指定して作成したメモリ
         マップドファイルを、munmap() の呼び出し、または プロセスを終了
         する前に 'MAP_PRIVATE' フラグと 'PROT_READ' を指定して再度
         マップしなおすと、関連付けられたファイルにデータを書き戻しま
         せん。

概要   : メモリマップドファイルの msync() が失敗する問題の修正
タイプ : バグ修正
詳細   : mmap() の第一引数が有効な値であり、かつ、以下のどちらかの条件
         が成立する場合に、メモリマップドファイルへの msync() が失敗し
         ます。
         - メモリマップドファイルの開始アドレスが 512MB 境界ではなく、
           領域が次の 512MB 境界を越え、使用ページサイズが 2MB ページ
           である場合
         - メモリマップドファイルの開始アドレスが 16GB 境界ではなく、
           領域が次の 16GB 境界を越え、使用ページサイズが 64MB ページ
           である場合
         メモリマップドファイルが mmap() の第一引数に NULL を指定され
         て作成された場合は、この問題は発生しません。


概要   : MAP_FIXED 無しにユーザがアドレス指定して要求した mmap が失敗
         する問題の修正
タイプ : バグ修正
詳細   : ユーザが、 2MB ページのメモリを 512MB 境界でない開始アドレス、
         または、64MB ページのメモリを 16GB 境界でない開始アドレスを
         指定して、 MAP_FIXED 無しに mmap() を要求した場合、メモリマッ
         ピングが失敗する場合が有ります。

概要   : 特権ユーザが "/" にコアダンプファイルを作成しようとした時、
         誤ったファイル名で作成される問題の修正
タイプ : バグ修正
詳細   : 特権ユーザが VE プロセスのコアダンプを採取するため、パス "/" 
         に VE コアダンプファイルを作ろうとすると、VEOS が誤った名前で
         VE コアダンプファイルを作成します。

概要   : setjump() を共有ライブラリの中から実行するとプログラムがセグ
         メンテーションフォールト を起こす問題の修正
タイプ : バグ修正
詳細   : setjmp() が共有ライブラリから実行されると、VE レジスタの一つ
         が予期せず更新されるため、プログラムの処理が進んだ所でセグ
         メンテーションフォールトが発生します。

概要   : "/opt/nec/ve/bin/pidstat -l" がセグメンテーションフォールトを
         起こす問題の修正
タイプ : バグ修正
詳細   : VE 用コマンド "/opt/nec/ve/bin/pidstat -l" がゾンビプロセスの
         情報を表示しようとすると、コマンドがセグメンテーションフォール
         トにより終了します。

概要   : VE 用 time コマンドで起動された VE プログラムが execve() で
         VH プログラムを実行した場合、VE 用 time コマンドが失敗する問題
         を修正
タイプ : バグ修正
詳細   : VE 用 time コマンドで起動された VE プロセスが execve() で VH
         プロセスを実行すると、time コマンドは "No such process" エラー
         で失敗します。

概要   : アカウンティングファイルにユーザが作成したのではない 
         "Dummy_task" が記録される問題の修正
タイプ : バグ修正
詳細   : VE 用プロセスアカウンティングが有効で、VE 用 time コマンドが
         プロセスの実行に失敗した場合、アカウンティングファイルに
         "Dummy_task" エントリが記録されます。しかし、その名前のタスク
         が作成されることは有りません。

概要   : VH 用バイナリを VE 用 time コマンドで起動すると、アカウン
         ティングファイルに "Dummy_task" が記録される問題の修正
タイプ : バグ修正
詳細   : VE 用 time コマンドで VH 用バイナリを実行すると、実行は成功
         しますが、 VE 用のアカウンティングファイルに "Dummy_task" が
         記録されます。そのため同様の VE 用コマンド taskset、prlimit、
         time を VE バイナリのみ実行可能とし、VH バイナリをこれらの
         コマンドから直接実行できないように変更しました。


2.0.3
この節は VEOS version 2.0.1 から 2.0.3 の変更を記載しています。

概要   : glibc API が使用する内部バッファのメモリ消費改善
タイプ : 機能拡張
詳細   : VE バイナリのデフォルトページサイズに関わらず、printf()、
         dprintf() などの内部バッファを利用する API は 2MB ページを
         使用します。 デフォルトページサイズが 64MB の場合、 前の
         バージョンと比較して、これらの API のメモリ消費は 62MB
         削減されます。

概要   : memcpy() 性能の改善
タイプ : 機能拡張
詳細   : 小さいサイズのデータコピー/転送にベクトル対応 memcpy() を使
         用し、性能を改善しました。性能が改善される API は fread(), 
         fwrite(), strcpy(), stpcpy(), strncat() などです。

概要   : system() のメモリ消費改善
タイプ : 機能拡張
詳細   : system() から VH プログラムを実行する際に VE メモリを消費し
         ないように、要求を VH 側で処理するようにします。ユーザは 僅
         かなメモリ消費で VE から system() で VH プログラムを実行する
         ことができます。

概要   : glibc の特定バージョンにおける openat() の制限を解除
タイプ : 機能拡張
詳細   : 引数にフラグ "O_TMPFILE | O_RDWR" と mode を指定した openat()
         によってシンボリックリンクファイルを作成し、それを引き数
         (oldpath) に指定して linkat() でハードリンクファイルを作成した
         時の、パーミッションを設定するライブラリ処理を修正しました。

概要   : VE プロセスレジスタを取得しようとした時 VEOS 性能が低下する
         問題の修正
タイプ : バグ修正
詳細   : libveosinfo ライブラリに含まれる ve_get_regvals() を使って
         VE プロセスレジスタを取得しようとした時、VEOS の性能が著しく
         低下します。

概要   : マルチスレッド環境において、sched_setaffinity() システムコール
         と taskset コマンドがセグメンテーションフォールトを起こすこと
         がある問題の修正
タイプ : バグ修正
詳細   : マルチスレッド環境において、sched_setaffinity() システムコー
         ルまたは、taskset コマンドによって、スレッドをある VE コアか
         ら別の VE コアに移動させた時に、スレッドのコンテキストの一部
         であるメモリ/アドレス変換が新しい VE コアに復元されず、スレッ
         ドがセグメンテーションフォールト(SIGSEGV)を起こします。


2.0.1

概要   : VE 用 glibc のサポート
タイプ : 機能拡張
詳細   : VE 用 glibc が利用できます。追加の情報については VEOS の
         ドキュメント "VEプログラムの実行方法" と "Cライブラリ
         （Glibc)の相違点" を参照してください。

概要   : 高速 I/O のサポート
タイプ : 機能拡張
詳細   : 「高速 I/O」はVEとVH間のデータ転送を効率的に行うことで、I/O
         性能を向上します。本機能は、'libveaccio' ライブラリに含まれ
         ます。このライブラリを実行時にロードすることで、高速I/Oが
         有効になります。使用方法については、VEOS のドキュメント "VE
         プログラムの実行方法" を参照してください。

概要   : ノンアトミック I/O のサポート
タイプ : 機能拡張
詳細   : read/write 系と send/recv 系のシステムコール (msghdr 構造体,
         mmsghdr 構造体を使う send/recv を除く) のノンアトミック I/O
         版をサポートします。ノンアトミックモード I/O において、要求
         されたサイズが 64MB を超える場合、I/O 命令は複数の 64MB 単位
         の I/O に分割されます。このノンアトミック I/O は VH 側のメモ
         リ消費を削減します。

概要   : ve_exec が SIGSEGV で異常終了する問題の修正
         修正
タイプ : バグ修正
詳細   : VE プロセスがマルチスレッドで動作している時、VE スレッドが
         exit_group() システムコールを実行すると、ve_exec の中で
         exit_group() の処理が VE タスクの状態を追跡するための領域
         を解放します。同時に別のスレッドがその領域にアクセスしよう
         とすると、セグメンテーションフォールトが発生します。

概要   : ve_get_regvals() 実行中に VE プロセスがハングアップする問題
         の修正
タイプ : バグ修正
詳細   : ve_get_regvals() の処理において、VEOS が誤った VE タスクの
         扱いをしていたため、VE タスクが VE コアにスケジュールされ
         なくなります。その結果 VE プロセスはハングアップしたように
         なります。

概要   : execve() システムコールを実行するとグローバル変数 "environ" 
         にエントリが重複して追加される問題を修正
タイプ : バグ修正
詳細   : VE プログラムが VE バイナリをロードする execve() を
         再帰的に呼び出すと、LOG4C_RCPATH や VE_EXEC_PATH 等の環境
         変数がグローバル変数 "environ" に重複して追加されます。外部
         変数の総数が増えるため、execve() システムコールの失敗に
         繋がります。

概要   : VE 用 'sadc' コマンドが終了しない問題の修正
タイプ : バグ修正
詳細   : VE 用 'sadc' コマンドは HW データのファイルの構文解析に失敗
         した場合、ハングアップします。そのため、cron ジョブによって
         定期的に起動された 'sadc' コマンドは残り続けます。


1.3.2

概要   : write() 系システムコールの性能を改善
タイプ : 機能拡張
詳細   : write() 系システムコールの性能を改善するために、システムコール
         処理の VE メモリからのデータ読み込みを更新しました。
         write() 系システムコールは write(), writev(), pwrite(), 
         pwritev() が該当します。

概要   : VE-VH間のデータ転送性能の向上
タイプ : 機能強化
詳細   : VE ドライバが提供している、データ転送対象のVH メモリ管理機能
	 を改善しました。VH メモリ管理リストを改善したことにより、
	 read()/write()システムコール等のVE-VH間のデータ転送性能が向上
         します。

概要   : VE AIO のログメッセージ改善
タイプ : 機能拡張
詳細   : いくつかのログメッセージを改善しました。VE AIOのエラーにより
         プロセスがアボートされる場合、標準エラー出力にメッセージを出
         力します。

概要   : vfork() システムコールで生成された VE プロセスのスケジュー
         リング中に VEOS が異常終了する問題の修正
タイプ : バグ修正
詳細   : vfork() で生成された VE プロセスのプロセス管理情報が VEOS 内
         で適切に設定されません。そのため、vfork で生成された子VEプロ
         セスのスケジューリングを行った際 VEOS が異常終了します。

概要   : vfork() システムコールで生成された VE プロセスがゾンビ状態で
         残留する問題の修正
タイプ : バグ修正
詳細   : vfork() で生成された子VEプロセスが終了するとき、既に終了してい
         る親 VE プロセスを起こそうとして、VEOS の中でデッドロックを引
         き起こした結果、子VEプロセスがゾンビ状態で残留します。

概要   : 代替シグナルスタック上でシグナルハンドラを連続して実行しよう
         とすると、VE プロセスがハングアップする問題の修正
タイプ : バグ修正
詳細   : VEOS がコアのレジスタを不完全に読み込むため、プロセスが代替
         シグナルスタック上で動作していないと誤って認識します。この
         問題は、動作不定の振る舞いを引き起こします。

概要   : ヒープの開始アドレスよりもヒープを減らそうとした場合、VE プロ
         セスが SIGSEGV を受信する問題の修正
タイプ : バグ修正
詳細   : brk() システムコールの処理が誤っていたため、ライブラリによっ
         てマップされた TLS 領域がアンマップされ、VE プロセスが 
         SIGSEGV で終了します。

概要   : sysinfo() システムコールによって要求された 'freeram' フィール
         ドが適切にアップデートされない問題の修正
タイプ : バグ修正
詳細   : sysinfo() システムコールが適切に更新されていない誤った 
         freeram (未使用メモリの総量) を返すため、VE プロセスは誤った
         値を取得します。

概要   : pthread_exit() を実行しても VE プロセスの解放処理が実行され
         ない問題の修正
タイプ : バグ修正
詳細   : 終了処理中の VE スレッドに対し SIGCONT が送られた場合、VE
         プロセスの解放処理が正しく行われないため、 スレッドに関係
         していたリソースが解放されないことがあります。

概要   : VE プロセスのスタックが延ばされた時に VE strace コマンドが
         VE プロセスを正しく実行できない問題の修正
タイプ : バグ修正
詳細   : VE strace コマンドは VE プロセスのスタックを伸長する grow()
         システムコールをトレースできないため、VE strace コマンドは
         動作不定の振る舞いをします。



1.3

概要   : clock_gettime(), gettimeofday() の性能を改善
タイプ : 機能拡張
詳細   : 'CLOCK_MONOTONIC' を指定した clock_gettime() と、gettimeofday()
         の性能を改善しました。プロセスまたはスレッドが、 gettimeofday()
         によるシステム時間を要求、または clock_gettime()によるモノト
         ニック時間を要求した場合、最初のリクエストでは VH のシステム
         コールの結果を返します。それ以降の呼び出しにおいて、同じスレッ
         ドグループの時刻は VH のシステムコールを実行した結果ではなく、
         VE 側で算出された値になります。

概要   : VE のための非同期な I/O 操作をサポート(VE AIO)
タイプ : 機能拡張
詳細   : VE のための非同期な I/O 操作をサポートしました。VE AIO 用の関
         数は 'libsysve' ライブラリに含まれます。VE と VH 間でのデータ
         転送と実際の I/O 処理は非同期に行われ、VE 上のプログラムはその
         間も処理を進めることができます。

概要   : ロード失敗の原因解析のための標準エラーメッセージ出力の追加
タイプ : 機能拡張
詳細   : 実行ファイルのロードが失敗した場合に、標準エラー出力にエラー
         メッセージを出力するように変更しました。このメッセージはユー
         ザにロード失敗について有益な情報を提供します。

概要   : VE プロセスが SIGBUS で異常終了する問題の修正
タイプ : バグ修正
詳細   : ユーザが共有ライブラリの bss 領域に futex を置いた場合、VE
         プロセスが SIGBUS で異常終了する場合があります。

概要   : VE プロセスが SIGFPE で異常終了する問題の修正
タイプ : バグ修正
詳細   : ユーザが mprotect() を NULL アドレスを指定して実行した場合、
         VE プロセスが SIGFPE で異常終了する場合があります。

概要   : スレッドが無期限に停止する問題の修正
タイプ : バグ修正
詳細   : fork() によって作成された親プロセスが pthread_create() で作成
         したスレッドが join しようとした時、親プロセスが既に終了して
         いると、スレッドは無期限に停止します。

概要   : write() 系システムコールが失敗することがある問題の修正
タイプ : バグ修正
詳細   : fork()/vfork()/system() を別のスレッドで同時に実行すると、
         write() 系システムコールが失敗することが有ります。write(), 
         writev(), pwrite(), pwritev() が該当します。

概要   : スレッドのシグナルマスクと保留中のシグナルが execve() 前後で
         保存されない問題の修正
タイプ : バグ修正
詳細   : execve() の前後でスレッドのシグナルマスクが保存されません。
         言い換えると、シグナルがブロックされたスレッドが execve() を
         実行した後、新しくロードされたプロセスはシグナルがマスクされ
         ません。同様に、VEOS 内で保留している VE プロセス宛てのシグ
         ナルも execve() 前後で保存されません。

概要   : 代替シグナルスタックで実行していないにも関わらず、代替シグ
         ナルスタックで実行していると VE プロセスが誤った情報を返す
         問題の修正
タイプ : バグ修正
詳細   : 代替シグナルスタックでシグナルハンドラを実行し、longjmp()で
         通常のスタックに戻った VE プロセスについて、 VEOS は最新の
         スタック情報を保持していません。そのため sigaltstack() シス
         テムコールは、いまだに代替シグナルスタックで実行をしていると
         いう誤った情報を返します。

概要   : swprintf() が変換指定子 '%lc' に対し誤った値を返す問題を修正
タイプ : バグ修正
詳細   : swprintf() に '%lc' (ワイド文字)を指定したとき、書き込んだ
         バイト数ではなく、-1 を返します。

概要   : musl-libc が使用する、動的ロードしたデータ用に 2MB ではなく 
         64MB をユーザプロセスが消費する問題の修正
タイプ : バグ修正
詳細   : デフォルトページサイズが 64MB になるようにコンパイルされたプ
         ログラムが localtime() の様な API を使用する場合、ライブラリ
         は '/usr/share/zoneinfo/*' にある zoneinfo データ用に、必要
         サイズが 2MB 以下であっても 64MB を消費します。

概要   : プロセス/スレッドの CPU 時刻 のクロック ID 指定時、
         timer_create() が -1 ではなく、無効な値を返す問題の修正
タイプ : バグ修正
詳細   : clock_getcpuclockid()/pthread_getcpuclockid() によって取得
         した clock_id を指定して timer_create() を実行した場合、
         timer_create() は errno に EINVAL をセットして失敗しません。
         (VE 用 timer_create() は プロセス/スレッドの CPU 時刻 の
         クロック ID をサポートしていません。)

概要   : プロセス/スレッドの CPU 時刻 のクロック ID を指定して、
         clock_nanosleep() を実行したとき、-1 を返すのではなく、無期限
         にスリープします。
タイプ : バグ修正
詳細   : clock_getcpuclockid()/pthread_getcpuclockid() によって取得
         した clock_id を指定して clock_nanosleep() を実行した場合、
         errno に EINVAL をセットして失敗しません。
         (VE 用 clock_nanosleep() は プロセス/スレッドの CPU 時刻 の
         クロック ID をサポートしていません。)

概要   : VE のプロセスアカウンティング機能を一度も有効にした事がない
         場合、アカウンティングファイルのログローテーションが失敗する
         問題の修正
タイプ : バグ修正
詳細   : SELinux が有効で、一度も VE のアカウンティング機能を有効に
         していない場合のみ、"acct_data_t" であるべき 
         "/var/opt/nec/ve/account" のコンテキストが誤った "var_t" に
         なっているため、 'cron.daily' によって起動された VE アカウン
         ティングファイルのログローテーションが失敗します。

1.2.2

概要   : バイナリ起動時とexecve システムコール実行時に渡す引き数と
         環境変数の最大数を引き上げ
タイプ : 機能拡張
詳細   : バイナリ起動時とexecve システムコール実行時に渡す事が可能な
         引数の数と環境変数の数を 256 から 512 に増やしました。

概要   : ユーザレジスタを取得するための、 libveosinfo の新しい API
タイプ : 機能拡張
詳細   : ve_get_regvals() という名前の新しい API が libveosinfo に追加
         されました。この API は VH プロセスから VE プロセスのユーザレ
         ジスタの値を取得することができます。libveosinfo を使用する
         あなたのプログラムをビルドするためには、'veosinfo-devel' パッ
         ケージをインストールする必要があります。

概要   : VEOS 内においてスレッド生成処理に失敗したとき、VEOSが異常終了
         する問題の修正
タイプ : バグ修正
詳細   : ve_exec が作成したメインプロセスからのスレッド生成要求が VEOS
         内で失敗した場合、初期化途中の VE タスクの削除中に未初期化の
         フィールドにアクセスし VEOS が異常終了する場合があります。

概要   : シグナルハンドラ実行中に VE プロセスが kill される問題の修正
タイプ : バグ修正
詳細   : VEOS がシグナルハンドラのスタックフレームを作成するとき、DMA
         用にアラインされていないメモリアドレスを設定するため、VE プロ
         セスがシグナルハンドラを実行するとき VE プロセスが異常終了す
         る場合があります。

概要   : 更新時に /dev/veslotN が消える問題の修正
タイプ : バグ修正
詳細   : "change" アクション発生時にリンク /dev/veslotN が削除されて
         いました。"change" アクションは一部の RPM パッケージの更新の
         際に実行される 'udevadm trigger' コマンドにより発生します。

概要   : 'veos' パッケージのアップデートが進まなくなる問題の修正
タイプ : 回避策
詳細   : 古いバージョンの 'veos' パッケージは、アップデート時に
         'systemd-binfmt' を再起動します。autofs 関連の問題のため、その
         処理が完了せず、'veos' パッケージのアップデートが先に進まなく
         なることがあります。

概要   : 'top/mpstat/pidstat' コマンドが誤った user, idle を表示する
         問題の修正
タイプ : バグ修正
詳細   : 'top' コマンドはデフォルトの表示において %Cpu(s) フィールドの
         user と idle のパーセンテージに誤った値を表示します。また、
         'mpstat' と 'pidstat' コマンドも 更新の間隔/回数 を指定しない
         場合に %user と %idle に誤った値を表示します。

概要   : 'prtstat' コマンドがいくつかの項目で誤った値を表示する問題の
         修正
タイプ : バグ修正
詳細   : 'prtstat' コマンドは pgrp, tty_nr, session, tpgid, num_threads,
         exit_signal について誤ったデータを表示します。

概要   : clock_gettime() システムコールが誤ったエラー番号をセットする
         問題の修正
タイプ : バグ修正
詳細   : 誤った clock_id を指定したとき、clock_gettime() は EINVAL で
         はなく EFAULT を errno にセットして失敗を返します。また、
         clock_id が INIT プロセスの CPU 時刻である場合、VEOS は INIT
         プロセスを持たないため、errno に EINVAL をセットして失敗します。


1.2.1

概要   : VEOS 性能改善のため負荷調整機能を追加
タイプ : 機能拡張
詳細   : 負荷調整機能をサポートすることで、 VEOS は、実行キューに VE
         タスクが 2 つ以上登録されている VE コアから、VE タスクが無い 
         VE コアに VE タスクを移動させます。この機能により、MPI を含む
         マルチプロセス/マルチスレッドプログラムの性能が改善します。

概要   : I/O性能の改善
タイプ : 機能拡張
詳細   : DMA転送の改善により、複数プロセスからの同時アクセスの I/O 
         性能が向上しました。

概要   : NOSUID でマウントされているディレクトリ上のプログラムが実行
         できない問題の修正
タイプ : バグ修正
詳細   : "nosuid" オプション付きでマウントされているファイルシステム上
         にある実行ファイルを、VEOS は起動または execve() で実行できま
         せん。

概要   : clock_gettime() が誤った timespec を返却する問題の修正
タイプ : バグ修正
詳細   : clock_gettime() に clock_getcpuclockid() で取得した他のプロセ
         スの CPU 時刻のクロック ID を指定しても、常に呼び出し元のプロ
         セスの実行時間を返します。

概要   : vfork() で作成した子プロセスが終了する前に親プロセスが実行を
         再開する問題の修正
タイプ : バグ修正
詳細   : vfork() で作成した子プロセスが終了する前に親プロセスが実行を
         再開すると、wait() の結果が意図しない結果になります。

概要   : マルチスレッドの VE プロセスが malloc() と free() を並列に実行
         すると異常終了する問題を修正
タイプ : バグ修正
詳細   : musl-libc のメモリ管理データの保護に問題があり、 malloc() と 
         free() を並列に実行するマルチスレッドの VE プログラムが異常
         終了する場合があります。

概要   : mmap() が不正なエラーコードを返す問題を修正
タイプ : バグ修正
詳細   : mmap() が失敗するいくつかのケースに置いて、誤ったエラーコード
         が VE プログラムに返却されます。(例) 誤った size または fd が 
         mmap() に渡された場合、EBADF が errno にセットされるべきところ、
         EINVAL が errno にセットされます。MAP_FIXED フラグが NULL アド
         レスと共に mmap() に渡された場合、EPERM が errno にセットされ
         るべきところ、 ENOMEM が errno にセットされます。

概要   : getresgid() が不正なエラーコードを返す問題を修正
タイプ : バグ修正
詳細   : getresgid() の処理中、期待された引数の内の一つが失われ、予期
         しない EFAULT が返却されることが有ります。


1.2

概要   : NEC システムソフトウェア向け DMA 転送性能改善
タイプ : 機能拡張
詳細   : ScaTeFS ライブラリ等、 VE プログラムにリンクされる NEC システ
         ムソフトウェア向けの DMA 転送機能をサポートします。これにより、
         データ転送性能を改善できます。この機能は NEC システムソフトウェ
         ア専用に実装されているため、本機能をユーザプログラムが直接利用
         した場合、NECは一切の技術サポートを行いません。

概要   : データ転送性能とメモリ消費の改善
タイプ : 機能拡張
詳細   : read()/write() 等のシステムコールを使った、大きなメモリ
         転送の性能を改善しました。

概要   : VEプロセスからのメモリ解放要求に対するVEOSのレスポンス改善
タイプ : 機能拡張
詳細   : 物理メモリ解放初期化を非同期に行うように変更し、VEプロセス
         のメモリ解放要求のレスポンスを向上します。 新たにメモリを要
         求された時に十分な物理メモリの初期化を完了していない場合、
         要求したサイズの空き領域が確保されるまでメモリ割当要求は待
         たされます。

概要   : libvepseudo のライセンスを LGPL に変更
タイプ : 機能拡張
詳細   : 疑似プロセスを構成するコンポーネントの一つである 
         libvepseudo ライブラリのライセンスを GPL から LGPL に
         変更しました。

概要   : VE プロセス 異常終了の修正
タイプ : バグ修正
詳細   : サイズが 0 のファイルをメモリにマップしている VE プログ
         ラム が vfork() を実行した時、 VEOS が再起動し、同ノード
         で動作している全ての VE プロセスが終了する場合があります。

概要   : VEOS の仮想メモリ消費量が増え続ける問題の修正
タイプ : バグ修正
詳細   : VE プロセスがコアを生成する時、VEOS の仮想メモリ使用量
         は徐々に増加していき、コア生成終了後も仮想メモリ使用量
         は元の値に戻りません。

概要   : VE で "host missing page exception" が発生しても SIGSEGV
         を VE プロセスが受け取れない問題の修正
タイプ : バグ修正
詳細   : VE プロセスはシグナル(SIGSEGV)受信時に終了させられること
         無く、実行を継続します。

概要   : fork()に失敗し 子プロセスの生成に失敗する問題の修正
タイプ : バグ修正
詳細   : VE プロセスが無効な CPU_SET を指定して sched_setaffinity 
         を実行した場合、それ以降の fork() は失敗します。

概要   : VH 起動時の psacct-ve サービス起動失敗の修正
タイプ : バグ修正
詳細   : psacct-ve サービスは VEOS が動作している事を前提に
         しています。psacct-ve サービスが 'enabled' に設定
         されている場合、VH 再起動時に VEOS 起動よりも前に
         psacct-ve が開始され、サービス開始に失敗することが
         あります。

概要   : vmstat と sar コマンドの 'blocked' プロセスの値に不正
         値が表示される問題の修正
タイプ : バグ修正
詳細   : VEOS は 'blocked' プロセス (I/O完了待ちのプロセス) の数を
         カウントするための情報を管理していないため、 VE 用 vmstat 
         コマンドと sar コマンドが表示する 'blocked' プロセスの値
         に 0 を表示するべきところ、不正な値を表示します。


1.1.1

概要   : execve() 処理中の VEOS 異常終了の修正
タイプ : バグ修正
詳細   : VEOS が execve() の処理をしている間に、要求元プロセス
         がシグナルで終了させられた場合、プロセス管理情報の
         更新に失敗し、VEOS が異常終了することがあります。

概要   : execve() をスレッドが実行しているプロセスの、スレッド
         グループリーダに SIGKILL が配送された時、VEOS が異常
         終了する問題を修正。
タイプ : バグ修正
詳細   : VEOS がスレッドからの execve() を処理している間に、
         同時にスレッドグループリーダーへの SIGKILL 配送を
         行うと、VEOS が再起動し、同ノードで動作している 
         VE プロセスが終了する場合があります。

概要   : VEOS が VH のメモリを大量消費する問題の修正
タイプ : バグ修正
詳細   : 巨大なメモリセグメントを持つプロセスのコアを生成する
         時、VEOS が大量の VH メモリを消費する場合があります。

概要   : VEOS 動作異常の修正
タイプ : バグ修正
詳細   : VEOS が VE プロセスに対し CPU アフィニティの設定処理
         と、そのプロセスに対する別のリクエストを同時に処理し
         た場合、VEOS 内部データに不整合が生じ、VEOS の動作が
         不定になります。

概要   : DMA ディスクリプタの更新失敗の修正
タイプ : バグ修正
詳細   : DMA 転送を行っている VE プロセスの DMA ディスクリプタ
         が正しく更新されず、DMAが失敗する事があります。

概要   : 子プロセス生成に成功していても fork() がエラーを返す
         問題の修正
タイプ : バグ修正
詳細   : fork() 処理中の不具合により、子プロセスの生成に成功
         していても、親プロセスに EAGAIN が返却される場合が
         あります。

概要   : VE プロセス ハングアップの修正 
タイプ : バグ修正
詳細   : プロセス(スレッド) がスケジューリングされず、ハング
         アップすることがあります。

概要   : VE プロセス 異常終了の修正
タイプ : バグ修正
詳細   : シグナルハンドラ実行のためのスタックフレームが正しく
         作成されず、VE プロセスが異常終了する場合があります。

概要   : VH メモリリークの修正
タイプ : バグ修正
詳細   : VE プロセスが子プロセスを生成・終了したとき、親プロセ
         スが終了するまで VH のメモリリークが発生します。リーク
         したメモリは 親プロセスが終了した時に解放されます。

概要   : VE プロセス実行性能低下の修正
タイプ : バグ修正
詳細   : 複数の VE プロセスを実行した後、VEOS 内部データの不
         整合が発生した場合、プロセススケジューリングに失敗す
         ることがあります。その結果、プロセス実行性能の低下が
         発生します。

概要   : GDB のバックトレースコマンドの修正
タイプ : バグ修正
詳細   : GDB で "backtrace" コマンドを実行したとき、シグナルに割り
         込まれた関数のフレームが表示されません。

概要   : 特権DMA転送性能の改善
タイプ : 機能拡張
詳細   : VEOSが使用する特権DMA転送の性能を改善しました。これ
         により、システムコール(read()/write())実行時等の性能
         が向上します。

概要   : MPI や他のシステムライブラリのデータ転送速度を改善する
         機能のサポート
タイプ : 機能拡張
詳細   : MPI ライブラリまたは他のシステムライブラリのデータ転送
         速度を改善するために、VE プログラムが VH 側の System V
         shared memory へアクセス可能にする機能を提供します。そ
         れらのライブラリが、huge pages を使って System V shared
         memory を生成します。本機能は、対応するMPI ライブラリま
         たは他のシステムライブラリのみが使用できます。本機能を
         ユーザープログラムから直接使用した場合、NEC は一切の技
         術サポートを行いません。

概要   : コンテキストスイッチ性能の改善
タイプ : 機能拡張
詳細   : VEプロセス/スレッド間のコンテキストスイッチの性能
         を改善しました。

概要   : コアダンプ生成時間の改善
タイプ : 機能拡張
詳細   : VH で巨大な I/O を行っている間に VE プロセスのコア
         ダンプが行われた場合、コア生成に時間が掛かり、その間
         は ve_exec のスレッドが割り込み不可能なスリープ状態
         (Uninterruptible sleep) で残り続けます。
         コア生成処理を改善し、コア生成とスレッド解放までの時
         間を短縮しました。

概要   : sar によるシステムアクティビティデータ収集・蓄積の
         サポート
タイプ : 機能拡張
詳細   : sar によるシステムアクティビティデータの収集・蓄積を
         提供します。これに合わせて、ve_sysstat サービスが VE
         ノードと対応するように ve_sysstat@N (N は VE ノード
         番号) に変更されました。

概要   : sar コマンドの出力 "LINUX RESTART" を "VEOS RESTART"
         に変更
タイプ : 機能拡張
詳細   : VEOS を再起動した時に、sar コマンド結果に挿入される
         文字列を "LINUX RESTART" から "VEOS RESTART" に変更
         しました。

概要   : ipcs コマンドと ipcrm コマンドのサポート
タイプ : 機能拡張
詳細   : VE 用 ipcs コマンドと ipcrm コマンドを提供します。
         これらのコマンドは util-linux-ve パッケージに含まれ
         ます。


1.0.3

概要   : RHEL7.4/x86_64サポート
タイプ : 機能拡張
詳細   : RHEL7.4/x86_64 が新たにサポートされました。サポート
         しているプラットフォームとオペレーティングシステムに
         ついては README を参照してください。

概要   : binfmt 設定ファイルの配布
タイプ : 機能拡張
詳細   : VE 用 binfmt の設定ファイル (ve.conf) が 
        /usr/lib/binfmt.d/ に配置されるようになります。
        ユーザは ve_exec の指定をすることなく VEプログラム
        を実行することができます。 複数のVEが搭載されている
        場合、VEプログラムを実行する VEノードを環境変数
        (VE_NODE_NUMBER)で指定します。


1.0.2

概要   : シグナルハンドラ処理中のVEプロセス異常終了の修正
タイプ : バグ修正
詳細   : シグナルハンドラの処理に必要なスタック領域が確保
         できなかった場合、VE プロセスが kill されます。

概要   : VE プロセス ハングアップの修正 
タイプ : バグ修正
詳細   : VE プロセスが使用しているスタックの大半が使用され
         ている時に、そのVEプロセスに対してシグナルが送られ
         ると、稀にVEプロセスがハングアップすることがありま
         す。
         
概要   : VE プロセス 異常終了の修正
タイプ : バグ修正
詳細   : 同一の System V 共有メモリに対する shmdt()システム
         コールと shmctl() システムコールの処理要求が同時に 
         VEOS に到着した場合、その VEOS が再起動し、同ノード
         で動作している全ての VE プロセスが終了する場合が
         あります。

概要   : 巨大な TLS を使用するスレッドのスタック属性が指定
         された場合に pthread_create() が失敗する問題の修正
タイプ : バグ修正
詳細   : アプリケーションがスレッドのスタック属性を指定し、
         かつ、巨大な TLS を使用する場合に pthread_create()
         のスタック生成処理が失敗し EAGAIN が返却されます。

概要   : "sar -m" コマンドと共にインターバルを指定した場合に
         不正な情報が表示される問題の修正
タイプ : バグ修正
詳細   : "sar -m" コマンドと共にインターバル(-i オプション) 
         を指定すると、不正なセンサ情報が出力されます。 

概要   : kill(2) システムコール完了前に VE プロセス自身への
         シグナル配送を行うように処理を改善
タイプ : 機能拡張
詳細   : tkill(2),tgkill(2)を含むkill(2)関連システムコールで
         自分自身(VEプロセス自身)にシグナルを送った場合、
         シグナルは直ちにVEプロセスに配送されます。

概要   : VEOS ログメッセージの改善
タイプ : 機能拡張
詳細   : VEOS ログのメッセージ内容と出力レベルを変更しました。

概要   : VEOS RPM パッケージ名の改善
タイプ : 機能拡張
詳細   : SX-Aurora TSUBASA の RPM パッケージ名標準に準拠する
         ように、VEOS の RPM パッケージ名を変更しました。

1.0.1 - initial release

