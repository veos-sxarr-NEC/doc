<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:x="urn:schemas-microsoft-com:office:excel"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Excel.Sheet>
<meta name=Generator content="Microsoft Excel 15">
<link id=Main-File rel=Main-File href="../Difference_Points_glibc.htm">
<link rel=File-List href=filelist.xml>
<link rel=Stylesheet href=stylesheet.css>
<style>
<!--table
	{mso-displayed-decimal-separator:"\.";
	mso-displayed-thousand-separator:"\,";}
@page
	{margin:.75in .7in .75in .7in;
	mso-header-margin:.3in;
	mso-footer-margin:.3in;}
ruby
	{ruby-align:left;}
rt
	{color:windowtext;
	font-size:6.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:"ＭＳ Ｐゴシック", monospace;
	mso-font-charset:128;
	mso-char-type:katakana;
	display:none;}
-->
</style>
<![if !supportTabStrip]><script language="JavaScript">
<!--
function fnUpdateTabs()
 {
  if (parent.window.g_iIEVer>=4) {
   if (parent.document.readyState=="complete"
    && parent.frames['frTabs'].document.readyState=="complete")
   parent.fnSetActiveSheet(2);
  else
   window.setTimeout("fnUpdateTabs();",150);
 }
}

if (window.name!="frSheet")
 window.location.replace("../Difference_Points_glibc.htm");
else
 fnUpdateTabs();
//-->
</script>
<![endif]>
</head>

<body link=blue vlink=purple>

<table border=0 cellpadding=0 cellspacing=0 width=1349 style='border-collapse:
 collapse;table-layout:fixed;width:1011pt'>
 <col width=39 style='mso-width-source:userset;mso-width-alt:1248;width:29pt'>
 <col class=xl65 width=31 style='mso-width-source:userset;mso-width-alt:992;
 width:23pt'>
 <col width=240 style='mso-width-source:userset;mso-width-alt:7680;width:180pt'>
 <col width=512 style='mso-width-source:userset;mso-width-alt:16384;width:384pt'>
 <col width=527 style='mso-width-source:userset;mso-width-alt:16864;width:395pt'>
 <tr height=19 style='height:14.25pt'>
  <td height=19 width=39 style='height:14.25pt;width:29pt'></td>
  <td class=xl65 width=31 style='width:23pt'></td>
  <td width=240 style='width:180pt'></td>
  <td width=512 style='width:384pt'></td>
  <td width=527 style='width:395pt'></td>
 </tr>
 <tr height=20 style='height:15.0pt'>
  <td height=20 style='height:15.0pt'></td>
  <td class=xl67 width=31 style='width:23pt'>No</td>
  <td class=xl68 width=240 style='width:180pt'>ケース</td>
  <td class=xl68 width=512 style='width:384pt'><ruby>相違点<span style='display:
  none'><rt>ソウイテン</rt></span></ruby></td>
  <td class=xl68 width=527 style='width:395pt'><ruby>原因<span style='display:
  none'><rt>ゲンイン</rt></span></ruby></td>
 </tr>
 <tr height=19 style='height:14.25pt'>
  <td height=19 style='height:14.25pt'></td>
  <td class=xl76 width=31 style='width:23pt'>1</td>
  <td class=xl66 width=240 style='width:180pt'><ruby>浮動<span style='display:
  none'><rt>フドウ</rt></span></ruby><ruby>小数<span style='display:none'><rt>ショウスウ</rt></span></ruby><ruby>点<span
  style='display:none'><rt>テン</rt></span></ruby><ruby>例外<span style='display:
  none'><rt>レイガイ</rt></span></ruby></td>
  <td class=xl84 width=512 style='width:384pt'>VEではサブノーマル<ruby>数<span
  style='display:none'><rt>スウ</rt></span></ruby>に<ruby>関連<span
  style='display:none'><rt>カンレン</rt></span></ruby>する<ruby>例外<span
  style='display:none'><rt>レイガイ</rt></span></ruby>は<ruby>出力<span
  style='display:none'><rt>シュツリョク</rt></span></ruby>されません</td>
  <td class=xl85 width=527 style='border-left:none;width:395pt'>VEアーキテクチャはサブノーマル<ruby>数<span
  style='display:none'><rt>スウ</rt></span></ruby>をサポートしないため</td>
 </tr>
 <tr height=19 style='mso-height-source:userset;height:14.25pt'>
  <td height=19 style='height:14.25pt'></td>
  <td rowspan=2 class=xl116 width=31 style='border-bottom:1.0pt solid black;
  border-top:none;width:23pt'>2</td>
  <td rowspan=2 class=xl73 width=240 style='border-bottom:1.0pt solid black;
  border-top:none;width:180pt'>スレッドの<ruby>最小<span style='display:none'><rt>サイショウ</rt></span></ruby>スタックサイズ(PTHREAD_STACK_MIN)</td>
  <td rowspan=2 class=xl119 width=512 style='border-bottom:1.0pt solid black;
  width:384pt'>x86アーキテクチャでの最小スタックサイズが16KBですが、VEの最小スタックサイズは4MBです。</td>
  <td rowspan=2 class=xl117 width=527 style='border-bottom:1.0pt solid black;
  width:395pt'>　</td>
 </tr>
 <tr height=19 style='mso-height-source:userset;height:14.25pt'>
  <td height=19 style='height:14.25pt'></td>
 </tr>
 <tr height=181 style='height:135.75pt'>
  <td height=181 style='height:135.75pt'></td>
  <td class=xl74>3</td>
  <td class=xl71 width=240 style='border-top:none;width:180pt'>pthread_attr_setstack()によるスレッドスタックの<ruby>指定<span
  style='display:none'><rt>シテイ</rt></span></ruby></td>
  <td class=xl72 width=512 style='border-top:none;border-left:none;width:384pt'>pthread_attr_setstackでスレッド属性オブジェクトの<ruby>内部<span
  style='display:none'><rt>ナイブ</rt></span></ruby>の<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>を<ruby>変更<span
  style='display:none'><rt>ヘンコウ</rt></span></ruby>した<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>、スタックオーバーフローが<ruby>検出<span
  style='display:none'><rt>ケンシュツ</rt></span></ruby>できなくなります。そのため、pthread_attr_setstack()は<ruby>使用<span
  style='display:none'><rt>シヨウ</rt></span></ruby>しないでください。スタックサイズを<ruby>明示的<span
  style='display:none'><rt>メイジテキ</rt></span></ruby>に<ruby>変更<span
  style='display:none'><rt>ヘンコウ</rt></span></ruby>したい<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>、pthread_attr_setstacksize()を<ruby>使用<span
  style='display:none'><rt>シヨウ</rt></span></ruby>してください。pthread_attr_setstacksize()では<ruby>上記<span
  style='display:none'><rt>ジョウキ</rt></span></ruby>のような<ruby>問題<span
  style='display:none'><rt>モンダイ</rt></span></ruby>は<ruby>発生<span
  style='display:none'><rt>ハッセイ</rt></span></ruby>しません。<br>
    </td>
  <td class=xl82 width=527 style='border-top:none;border-left:none;width:395pt'>Linux
  Programmer's Manualには<ruby>以下<span style='display:none'><rt>イカ</rt></span></ruby>の<ruby>記載<span
  style='display:none'><rt>キサイ</rt></span></ruby>があります。<br>
    <span style='mso-spacerun:yes'> </span>アプリケーションが pthread_attr_setstack()
  を利用する際には、 スタックの割り当てに責任を持つ必要がある。 pthread_attr_setguardsize(3) を使って設定された guard
  size の値は無視される。 必要と思われる場合は、アプリケーションが責任を持ってガード領域 (読み書 きが行われないように保護された 1
  個かそれ以上のページ) の割り当てを行い、 スタックオーバーフローの可能性に対処するようにする必要がある。<br>
    <ruby>一方<span style='display:none'><rt>イッポウ</rt></span></ruby>、VEOSの<ruby>振<span
  style='display:none'><rt>フ</rt></span></ruby>る<ruby>舞<span style='display:
  none'><rt>マ</rt></span></ruby>いは<ruby>異<span style='display:none'><rt>コト</rt></span></ruby>なります。ユーザによってガード<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>が<ruby>与<span
  style='display:none'><rt>アタ</rt></span></ruby>えられたとしても、スタックはスタック<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>の<ruby>限界<span
  style='display:none'><rt>ゲンカイ</rt></span></ruby>を<ruby>超<span
  style='display:none'><rt>コ</rt></span></ruby>えて<ruby>伸長<span
  style='display:none'><rt>シンチョウ</rt></span></ruby>し、<ruby>予期<span
  style='display:none'><rt>ヨキ</rt></span></ruby>しない<ruby>結果<span
  style='display:none'><rt>ケッカ</rt></span></ruby>を<ruby>招<span
  style='display:none'><rt>マネ</rt></span></ruby>くことがあります。そのため、pthread_attr_setstack()は<ruby>使用<span
  style='display:none'><rt>シヨウ</rt></span></ruby>しないでください。</td>
 </tr>
 <tr height=109 style='height:81.75pt'>
  <td height=109 style='height:81.75pt'></td>
  <td class=xl76 width=31 style='width:23pt'>4</td>
  <td class=xl71 width=240 style='border-top:none;border-left:none;width:180pt'>$ORIGIN<ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby></td>
  <td class=xl72 width=512 style='border-top:none;border-left:none;width:384pt'>x86/Linux<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby>ではリンク<ruby>時<span
  style='display:none'><rt>ジ</rt></span></ruby>オプションのrpath
  指定やdlopen()等で&quot;$ORIGIN&quot;を<ruby>指定<span style='display:none'><rt>シテイ</rt></span></ruby>した場合、プログラムや共有ライブラリがあるディレクトリに<ruby>展開<span
  style='display:none'><rt>テンカイ</rt></span></ruby>されますが、<br>
    VEでは<ruby>環境<span style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>&quot;VE_LD_ORIGIN_PATH&quot;の<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>が<ruby>参照<span
  style='display:none'><rt>サンショウ</rt></span></ruby>されます。<br>
    プログラム<ruby>中<span style='display:none'><rt>チュウ</rt></span></ruby>で&quot;$ORIGIN&quot;によりプログラムや共有ライブラリがあるディレクトリを<ruby>指定<span
  style='display:none'><rt>シテイ</rt></span></ruby>される<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>、あらかじめ<ruby>対象<span
  style='display:none'><rt>タイショウ</rt></span></ruby>のパスを<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>&quot;VE_LD_ORIGIN_PATH&quot;に<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>してください。</td>
  <td class=xl72 width=527 style='border-top:none;border-left:none;width:395pt'>ve_execが<ruby>引数<span
  style='display:none'><rt>ヒキスウ</rt></span></ruby>として&quot;/proc/self/exe&quot;を<ruby>指定<span
  style='display:none'><rt>シテイ</rt></span></ruby>してreadlinkシステムコールをcallした<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>、<ruby>戻<span
  style='display:none'><rt>モド</rt></span></ruby>り<ruby>値<span style='display:
  none'><rt>チ</rt></span></ruby>はve_execのパスとなるため。</td>
 </tr>
 <tr height=55 style='height:41.25pt'>
  <td height=55 style='height:41.25pt'></td>
  <td class=xl81 width=31 style='border-top:none;width:23pt'>5</td>
  <td class=xl71 width=240 style='border-top:none;border-left:none;width:180pt'>&quot;ve_exec&quot;または&quot;execve()&quot;からの&quot;ld-linux-ve.so.1&quot;の<ruby>直接<span
  style='display:none'><rt>チョクセツ</rt></span></ruby><ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby></td>
  <td class=xl72 width=512 style='border-top:none;border-left:none;width:384pt'>x86/Linux<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby>ではダイナミックリンカ&quot;ld-linux-x86-64.so.2&quot;をコマンドとして<ruby>直接<span
  style='display:none'><rt>チョクセツ</rt></span></ruby><ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>すると<ruby>引数<span
  style='display:none'><rt>ヒキスウ</rt></span></ruby>に<ruby>指定<span
  style='display:none'><rt>シテイ</rt></span></ruby>されたx86バイナリをロードすることができますが、VEではダイナミックリンカをコマンドとして<ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>することはできません。</td>
  <td class=xl82 width=527 style='border-top:none;border-left:none;width:395pt'>　</td>
 </tr>
 <tr height=37 style='height:27.75pt'>
  <td height=37 style='height:27.75pt'></td>
  <td class=xl74>6</td>
  <td class=xl73 width=240 style='border-top:none;width:180pt'><span
  style='mso-spacerun:yes'> </span>&quot;ldd&quot;コマンド</td>
  <td class=xl75 width=512 style='border-top:none;border-left:none;width:384pt'>VE<ruby>用<span
  style='display:none'><rt>ヨウ</rt></span></ruby> &quot;ldd&quot;コマンドは<ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>バイナリの<ruby>依存<span
  style='display:none'><rt>イゾン</rt></span></ruby>リストのみ<ruby>表示<span
  style='display:none'><rt>ヒョウジ</rt></span></ruby>し、<ruby>共有<span
  style='display:none'><rt>キョウユウ</rt></span></ruby>ライブラリについては<ruby>表示<span
  style='display:none'><rt>ヒョウジ</rt></span></ruby>しません。<ruby>対<span
  style='display:none'><rt>タイ</rt></span></ruby>して、x86_64 の &quot;ldd&quot; は<ruby>両方<span
  style='display:none'><rt>リョウホウ</rt></span></ruby>の<ruby>依存<span
  style='display:none'><rt>イゾン</rt></span></ruby>リストを<ruby>表示<span
  style='display:none'><rt>ヒョウジ</rt></span></ruby>します。</td>
  <td class=xl75 width=527 style='border-top:none;border-left:none;width:395pt'>lddコマンドでは<ruby>内部<span
  style='display:none'><rt>ナイブ</rt></span></ruby>でダイナミックリンカを<ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>していますが、VEではダイナミックリンカの<ruby>直接<span
  style='display:none'><rt>チョクセツ</rt></span></ruby><ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>はサポートされないため。(#5 <ruby>参照<span
  style='display:none'><rt>サンショウ</rt></span></ruby>)</td>
 </tr>
 <tr height=73 style='height:54.75pt'>
  <td height=73 style='height:54.75pt'></td>
  <td rowspan=4 class=xl108 style='border-bottom:1.0pt solid black;border-top:
  none'>7</td>
  <td rowspan=4 class=xl119 width=240 style='border-bottom:1.0pt solid black;
  width:180pt'>malloc()によるメモリアロケーションの<ruby>最適化<span style='display:none'><rt>サイテキカ</rt></span></ruby></td>
  <td class=xl78 width=512 style='width:384pt'>a) x86/Linux<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby>ではDEFAULT_MMAP_THRESHOLD_MAXマクロの<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>は32MBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されていますが、VEでは1GBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されます。<br>
    <br>
    </td>
  <td rowspan=2 class=xl75 width=527 style='border-bottom:1.0pt solid black;
  width:395pt'>malloc()はサイズによってsbrk()またはmmap()を<ruby>用<span style='display:
  none'><rt>モチ</rt></span></ruby>いてメモリ<ruby>領域<span style='display:none'><rt>リョウイキ</rt></span></ruby>を<ruby>確保<span
  style='display:none'><rt>カクホ</rt></span></ruby>しており、&quot;mmap_threshold&quot;より<ruby>小<span
  style='display:none'><rt>チイ</rt></span></ruby>さいサイズの<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>はsbrk()によって、それ<ruby>以上<span
  style='display:none'><rt>イジョウ</rt></span></ruby>のサイズの<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>はmmap()によって<ruby>確保<span
  style='display:none'><rt>カクホ</rt></span></ruby>します。<br>
    mmap()を<ruby>使用<span style='display:none'><rt>シヨウ</rt></span></ruby>した<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>にはページサイズ<ruby>単位<span
  style='display:none'><rt>タンイ</rt></span></ruby>でメモリが確保されますが、VEのページサイズは2MBまたは64MBと<ruby>大<span
  style='display:none'><rt>オオ</rt></span></ruby>きいため、x86/Linuxと<ruby>同<span
  style='display:none'><rt>オナ</rt></span></ruby>じ128kBの&quot;mmap_threshold&quot;ではページサイズに<ruby>満<span
  style='display:none'><rt>ミ</rt></span></ruby>たない<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>に<ruby>対<span
  style='display:none'><rt>タイ</rt></span></ruby>してもmmap()が<ruby>使用<span
  style='display:none'><rt>シヨウ</rt></span></ruby>され、メモリが<ruby>無駄<span
  style='display:none'><rt>ムダ</rt></span></ruby>に<ruby>消費<span
  style='display:none'><rt>ショウヒ</rt></span></ruby>されてしまうケースが<ruby>多<span
  style='display:none'><rt>オオ</rt></span></ruby>くなります。<br>
    メモリの<ruby>利用<span style='display:none'><rt>リヨウ</rt></span></ruby><ruby>効率<span
  style='display:none'><rt>コウリツ</rt></span></ruby>を<ruby>高<span
  style='display:none'><rt>タカ</rt></span></ruby>めるため、VEではDEFAULT_MMAP_THRESHOLDの<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>を1GBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>し、1GBより<ruby>小<span
  style='display:none'><rt>チイ</rt></span></ruby>さい<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>に<ruby>対<span
  style='display:none'><rt>タイ</rt></span></ruby>してはsbrk()を<ruby>用<span
  style='display:none'><rt>モチ</rt></span></ruby>いてメモリを<ruby>割<span
  style='display:none'><rt>ワ</rt></span></ruby>り<ruby>当<span style='display:
  none'><rt>ア</rt></span></ruby>てるようにしています。 </td>
 </tr>
 <tr height=107 style='mso-height-source:userset;height:80.25pt'>
  <td height=107 style='height:80.25pt'></td>
  <td class=xl79 width=512 style='border-top:none;width:384pt'>b)
  x86/Linux環境ではDEFAULT_MMAP_THRESHOLDマクロの<ruby>値<span style='display:none'><rt>アタイ</rt></span></ruby>は128kBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されていますが、VEでは1GBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されます。</td>
 </tr>
 <tr height=163 style='height:122.25pt'>
  <td height=163 style='height:122.25pt'></td>
  <td class=xl79 width=512 style='border-top:none;width:384pt'>c)
  x86/Linux環境ではmalloc()によって<ruby>作成<span style='display:none'><rt>サクセイ</rt></span></ruby>されるアリーナの<ruby>最大<span
  style='display:none'><rt>サイダイ</rt></span></ruby><ruby>数<span
  style='display:none'><rt>スウ</rt></span></ruby>は<ruby>有効<span
  style='display:none'><rt>ユウコウ</rt></span></ruby>コア<ruby>数<span
  style='display:none'><rt>スウ</rt></span></ruby>となりますが、VEでは1に<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されます。</td>
  <td class=xl83 width=527 style='width:395pt'>VEではHEAP_MAX_SIZEが2GBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されるため、malloc()によって<ruby>作成<span
  style='display:none'><rt>サクセイ</rt></span></ruby>されるアリーナのサイズも2GBとなります。<br>
    <ruby>一方<span style='display:none'><rt>イッポウ</rt></span></ruby>、glibc
  malloc()は<ruby>通常<span style='display:none'><rt>ツウジョウ</rt></span></ruby>スレッド<ruby>毎<span
  style='display:none'><rt>ゴト</rt></span></ruby>に<ruby>独立<span
  style='display:none'><rt>ドクリツ</rt></span></ruby>したヒープ<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>を<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>します。つまり、マルチスレッドのアプリケーションでは、スレッド<ruby>内<span
  style='display:none'><rt>ナイ</rt></span></ruby>でmalloc()をcallするとそれがどんなに<ruby>小<span
  style='display:none'><rt>チイ</rt></span></ruby>さい<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>であったとしても2GBの<ruby>領域<span
  style='display:none'><rt>リョウイキ</rt></span></ruby>が<ruby>確保<span
  style='display:none'><rt>カクホ</rt></span></ruby>されてしまうこととなり、メモリの<ruby>利用<span
  style='display:none'><rt>リヨウ</rt></span></ruby><ruby>効率<span
  style='display:none'><rt>コウリツ</rt></span></ruby>が<ruby>著<span
  style='display:none'><rt>イチジル</rt></span></ruby>しく<ruby>低下<span
  style='display:none'><rt>テイカ</rt></span></ruby>してしまいます。<br>
    この<ruby>問題<span style='display:none'><rt>モンダイ</rt></span></ruby>を<ruby>避<span
  style='display:none'><rt>サ</rt></span></ruby>けるため、VEではmalloc()によって<ruby>作成<span
  style='display:none'><rt>サクセイ</rt></span></ruby><ruby>可能<span
  style='display:none'><rt>カノウ</rt></span></ruby>なアリーナの最大数1に<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>しています。この<ruby>結果<span
  style='display:none'><rt>ケッカ</rt></span></ruby>、VEではアリーナはプロセスに<ruby>対<span
  style='display:none'><rt>タイ</rt></span></ruby>して1つだけ<ruby>作成<span
  style='display:none'><rt>サクセイ</rt></span></ruby>され、<ruby>全<span
  style='display:none'><rt>スベ</rt></span></ruby>てのスレッドで<ruby>共用<span
  style='display:none'><rt>キョウヨウ</rt></span></ruby>されます。</td>
 </tr>
 <tr height=37 style='height:27.75pt'>
  <td height=37 style='height:27.75pt'></td>
  <td class=xl80 width=512 style='width:384pt'>d) x86<ruby>/Linux環境<span
  style='display:none'><rt>・Ｌｉｎｕｘカンキョウ</rt></span></ruby>ではHEAP_MAX_SIZEマクロの<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>は64MBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されていますが、VEでは2GBに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>されます。</td>
  <td class=xl72 width=527 style='width:395pt'>Glibcでは、HEAP_MAX_SIZEは<ruby>通常<span
  style='display:none'><rt>ツウジョウ</rt></span></ruby>DEFAULT_MMAP_THRESHOLD_MAXの2<ruby>倍<span
  style='display:none'><rt>バイ</rt></span></ruby>の<ruby>値<span style='display:
  none'><rt>アタイ</rt></span></ruby>に<ruby>設定<span style='display:none'><rt>セッテイ</rt></span></ruby>されるため。</td>
 </tr>
 <tr height=235 style='height:176.25pt'>
  <td height=235 style='height:176.25pt'></td>
  <td rowspan=4 class=xl108 style='border-bottom:1.0pt solid black;border-top:
  none'>8</td>
  <td rowspan=4 class=xl119 width=240 style='border-bottom:1.0pt solid black;
  border-top:none;width:180pt'>システム<ruby>環境<span style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>の<ruby>名前<span
  style='display:none'><rt>ナマエ</rt></span></ruby></td>
  <td class=xl77 width=512 style='border-top:none;border-left:none;width:384pt'>a)
  VEでは、mallopt()に<ruby>関連<span style='display:none'><rt>カンレン</rt></span></ruby>する<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>(MALLOC_xxx)に&quot;VE_&quot;プリフィックスが<ruby>必要<span
  style='display:none'><rt>ヒツヨウ</rt></span></ruby>です。<ruby>例<span
  style='display:none'><rt>レイ</rt></span></ruby>) MALLOC_ARENA_TEST<ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>をVE<ruby>向<span
  style='display:none'><rt>ム</rt></span></ruby>けに<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>する<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>には、VE_MALLOC_ARENA_TESTを<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>してください。 <br>
    <br>
    &quot;VE_&quot;を<ruby>付加<span style='display:none'><rt>フカ</rt></span></ruby>する<ruby>対象<span
  style='display:none'><rt>タイショウ</rt></span></ruby>は<ruby>以下<span
  style='display:none'><rt>イカ</rt></span></ruby>の<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>です。<br>
    VE_MALLOC_ARENA_MAX<br>
    VE_MALLOC_ARENA_TEST<br>
    VE_MALLOC_CHECK_<br>
    VE_MALLOC_MMAP_MAX_<br>
    VE_MALLOC_MMAP_THRESHOLD_<br>
    VE_MALLOC_PERTURB_<br>
    VE_MALLOC_TRIM_THRESHOLD_<br>
    VE_MALLOC_TOP_PAD_</td>
  <td rowspan=4 class=xl75 width=527 style='border-bottom:1.0pt solid black;
  border-top:none;width:395pt'>VE<ruby>向<span style='display:none'><rt>ム</rt></span></ruby>けプロセスとVH(x86)<ruby>向<span
  style='display:none'><rt>ム</rt></span></ruby>けプロセスで<ruby>異<span
  style='display:none'><rt>コト</rt></span></ruby>なる<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>の<ruby>値<span
  style='display:none'><rt>アタイ</rt></span></ruby>を<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>できるようにするため</td>
 </tr>
 <tr height=181 style='height:135.75pt'>
  <td height=181 style='height:135.75pt'></td>
  <td class=xl77 width=512 style='border-top:none;border-left:none;width:384pt'>b)
  VEでは、memusageコマンドに関連する環境変数(MEMUSAGE_xxx)に&quot;VE_&quot;プリフィックスが必要です。例)
  MALLOC_ARENA_TEST変数をVE向けに設定する場合には、VE_MALLOC_ARENA_TESTを設定してください。 <br>
    <br>
    &quot;VE_&quot;を付加する対象は以下の環境変数です。<br>
    VE_MEMUSAGE_PROG_NAME<br>
    VE_MEMUSAGE_OUTPUT<br>
    VE_MEMUSAGE_BUFFER_SIZE<br>
    VE_MEMUSAGE_NO_TIMER<br>
    VE_MEMUSAGE_TRACE_MMAP</td>
 </tr>
 <tr height=322 style='mso-height-source:userset;height:241.5pt'>
  <td height=322 style='height:241.5pt'></td>
  <td rowspan=2 class=xl113 width=512 style='border-bottom:1.0pt solid black;
  border-top:none;width:384pt'>c) VEでは、<ruby>以下<span style='display:none'><rt>イカ</rt></span></ruby>の環境変数に&quot;VE_&quot;プリフィックスが必要です。<br>
    VE_LD_WARN<br>
    VE_LD_DEBUG<br>
    VE_LD_AUDIT<br>
    VE_LD_VERBOSE<br>
    VE_LD_PRELOAD<br>
    VE_LD_PROFILE<br>
    VE_LD_BIND_NOW<br>
    VE_LD_BIND_NOT<br>
    VE_LD_SHOW_AUXV<br>
    VE_LD_HWCAP_MASK<br>
    VE_LD_ORIGIN_PATH<br>
    VE_LD_LIBRARY_PATH<br>
    VE_LD_DEBUG_OUTPUT<br>
    VE_LD_DYNAMIC_WEAK<br>
    VE_LD_USE_LOAD_BIAS<br>
    VE_LD_POINTER_GUARD<br>
    VE_LD_PROFILE_OUTPUT<br>
    VE_LD_TRACE_PRELINKING<br>
    VE_LD_TRACE_LOADED_OBJECTS<br>
    VE_GCONV_PATH<br>
    VE_GETTEXT_LOG_UNTRANSLATED<br>
    VE_LANGUAGE<br>
    VE_OUTPUT_CHARSET<br>
    VE_LOCPATH<br>
    VE_I18NPATH<br>
    VE_GETCONF_DIR<br>
    VE_SOTRUSS_FROMLIST<br>
    VE_SOTRUSS_EXIT<br>
    VE_SOTRUSS_WHICH<br>
    VE_SOTRUSS_OUTNAME<br>
    VE_SOTRUSS_TOLIST<br>
    VE_MALLOC_TRACE<br>
    VE_MALLOC_CHECK_</td>
 </tr>
 <tr height=295 style='mso-height-source:userset;height:221.25pt'>
  <td height=295 style='height:221.25pt'></td>
 </tr>
 <tr height=73 style='height:54.75pt'>
  <td height=73 style='height:54.75pt'></td>
  <td class=xl86 style='border-top:none'>9</td>
  <td class=xl71 width=240 style='border-top:none;width:180pt'>プロファイリング</td>
  <td class=xl87 width=512 style='width:384pt'>1.プロファイリング<ruby>対象<span
  style='display:none'><rt>タイショウ</rt></span></ruby>のコンテキストスイッチ<ruby>等<span
  style='display:none'><rt>ナド</rt></span></ruby>でVEプロセスの<ruby>動作<span
  style='display:none'><rt>ドウサ</rt></span></ruby>が<ruby>一時<span
  style='display:none'><rt>イチジ</rt></span></ruby><ruby>中断<span
  style='display:none'><rt>チュウダン</rt></span></ruby>された<ruby>場合<span
  style='display:none'><rt>バアイ</rt></span></ruby>、<ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby><ruby>時間<span
  style='display:none'><rt>ジカン</rt></span></ruby>が<ruby>正確<span
  style='display:none'><rt>セイカク</rt></span></ruby>に<ruby>測定<span
  style='display:none'><rt>ソクテイ</rt></span></ruby>できません。<br>
    2. gprofによるプロファイリングを<ruby>行<span style='display:none'><rt>オコナ</rt></span></ruby>う<ruby>際<span
  style='display:none'><rt>サイ</rt></span></ruby>、SIGALRMは<ruby>使用<span
  style='display:none'><rt>シヨウ</rt></span></ruby>することができません。</td>
  <td class=xl72 width=527 style='border-top:none;width:395pt'><ruby>通常<span
  style='display:none'><rt>ツウジョウ</rt></span></ruby>、gprofはsetitimer()をITIMER_PROFフラグと<ruby>共<span
  style='display:none'><rt>トモ</rt></span></ruby>にcallしますが、VEはITIMER_PROFをサポートしないため、ITIMER_REALフラグと<ruby>共<span
  style='display:none'><rt>トモ</rt></span></ruby>にをcallします。<br>
    setitimer()の<ruby>詳細<span style='display:none'><rt>ショウサイ</rt></span></ruby>に<ruby>関<span
  style='display:none'><rt>カン</rt></span></ruby>しては、”システムコールの<ruby>相違点<span
  style='display:none'><rt>ソウイテン</rt></span></ruby>”ドキュメントを<ruby>参照<span
  style='display:none'><rt>サンショウ</rt></span></ruby>ください。</td>
 </tr>
 <tr height=145 style='height:108.75pt'>
  <td height=145 style='height:108.75pt'></td>
  <td class=xl86 style='border-top:none'>10</td>
  <td class=xl71 width=240 style='border-top:none;width:180pt'>system() API</td>
  <td class=xl87 width=512 style='width:384pt'>VE では、VE プログラムの<ruby>中<span
  style='display:none'><rt>ナカ</rt></span></ruby>でセット/クリアした<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>は、system() APIによって<ruby>起動<span
  style='display:none'><rt>キドウ</rt></span></ruby>された<ruby>子<span
  style='display:none'><rt>コ</rt></span></ruby>プロセスに<ruby>引<span
  style='display:none'><rt>ヒ</rt></span></ruby>き<ruby>継<span style='display:
  none'><rt>ツ</rt></span></ruby>がれません。<br>
    シナリオ：ユーザがコマンドプロンプトで<ruby>環境<span style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>を<ruby>設定<span
  style='display:none'><rt>セッテイ</rt></span></ruby>(export)したとします。system() で<ruby>起動<span
  style='display:none'><rt>キドウ</rt></span></ruby>した<ruby>子<span
  style='display:none'><rt>コ</rt></span></ruby>プロセスが<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby><ruby>使<span
  style='display:none'><rt>ツカ</rt></span></ruby>うことを<ruby>意図<span
  style='display:none'><rt>イト</rt></span></ruby>して、<ruby>子<span
  style='display:none'><rt>コ</rt></span></ruby>プロセスをsystem()で<ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>する前に、メインプログラムがその<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>を unsetenv を<ruby>用<span
  style='display:none'><rt>モチ</rt></span></ruby>いてクリアします。<br>
    このシナリオでは、コマンドプロンプトで設定された環境変数が、子プロセスから<br>
    見えます。</td>
  <td class=xl72 width=527 style='border-top:none;width:395pt'>VE プロセスの
  system()<span style='mso-spacerun:yes'> </span><ruby>要求<span
  style='display:none'><rt>ヨウキュウ</rt></span></ruby>は VEOS ではなく、VH OS (Linux)
  によって<ruby>実行<span style='display:none'><rt>ジッコウ</rt></span></ruby>されます。VE <ruby>内<span
  style='display:none'><rt>ナイ</rt></span></ruby>での<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby><ruby>変数<span
  style='display:none'><rt>ヘンスウ</rt></span></ruby>の<ruby>更新<span
  style='display:none'><rt>コウシン</rt></span></ruby>は VH の<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby>に<ruby>反映<span
  style='display:none'><rt>ハンエイ</rt></span></ruby>されていないため、<ruby>子<span
  style='display:none'><rt>コ</rt></span></ruby>プロセスは<ruby>変更<span
  style='display:none'><rt>ヘンコウ</rt></span></ruby>を<ruby>引<span
  style='display:none'><rt>ヒ</rt></span></ruby>き<ruby>継<span style='display:
  none'><rt>ツ</rt></span></ruby>ぎません。</td>
 </tr>
 <tr height=127 style='height:95.25pt'>
  <td height=127 style='height:95.25pt'></td>
  <td class=xl89 style='border-top:none'>11</td>
  <td class=xl71 width=240 style='border-top:none;border-left:none;width:180pt'>system()
  API</td>
  <td class=xl77 width=512 style='border-top:none;border-left:none;width:384pt'>VEのアーキテクチャにおいて、VEプロセスが新しいVEプログラムをロードして実行するためにsystem()
  APIを呼び出すとき、新しく作られたVEタスクの全てのシグナルハンドラは、SIG_DFLにリセットされます。</td>
  <td class=xl78 width=527 style='border-top:none;width:395pt'>VE<ruby>用<span
  style='display:none'><rt>ヨウ</rt></span></ruby>のsystem() APIは<ruby>新<span
  style='display:none'><rt>アタラ</rt></span></ruby>しいVHプロセスを<ruby>作成<span
  style='display:none'><rt>サクセイ</rt></span></ruby>します。この新しく作られたVHプロセスは、VEのバイナリを引数としてVHのexecve()を呼び出すことで、新しいVEのバイナリをロードし、<ruby>実行<span
  style='display:none'><rt>ジッコウ</rt></span></ruby>します。これはつまり、新しいVEのバイナリをロードするためにve_execを呼び出すことになります。　<br>
    ve_execのVEOSへのリクエストは、system()
  APIにより呼び出されたVEプロセスとの親子関係を持たない新しいVEプロセスを作ることになります。そのため、新しく作られたプロセスの全てのシグナルハンドラのルーチンはSIG_DFLにリセットされます。</td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 style='height:13.5pt'></td>
  <td class=xl65></td>
  <td colspan=3 style='mso-ignore:colspan'></td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 style='height:13.5pt'></td>
  <td class=xl65></td>
  <td><ruby>備考<span style='display:none'><rt>ビコウ</rt></span></ruby></td>
  <td colspan=2 style='mso-ignore:colspan'></td>
 </tr>
 <tr height=18 style='height:13.5pt'>
  <td height=18 style='height:13.5pt'></td>
  <td class=xl65></td>
  <td colspan=3 style='mso-ignore:colspan'>システムコールに<ruby>関<span
  style='display:none'><rt>カン</rt></span></ruby>するx86/Linux<ruby>環境<span
  style='display:none'><rt>カンキョウ</rt></span></ruby>との<ruby>相違点<span
  style='display:none'><rt>ソウイテン</rt></span></ruby>に<ruby>関<span
  style='display:none'><rt>カン</rt></span></ruby>しては&quot;システムコールの相違点&quot;のドキュメントに<ruby>記載<span
  style='display:none'><rt>キサイ</rt></span></ruby>しています。</td>
 </tr>
 <![if supportMisalignedColumns]>
 <tr height=0 style='display:none'>
  <td width=39 style='width:29pt'></td>
  <td width=31 style='width:23pt'></td>
  <td width=240 style='width:180pt'></td>
  <td width=512 style='width:384pt'></td>
  <td width=527 style='width:395pt'></td>
 </tr>
 <![endif]>
</table>

</body>

</html>
