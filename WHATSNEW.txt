2.5
This section describes changes between the 2.4.3 and 2.5 versions of VEOS.

Summary : RHEL8.1/x86_64 support
Type    : enhancement
Detail  : RHEL8.1/x86_64 is newly supported. Please see README for Supported
          Platforms and Operating Systems.

Summary : Unnecessary archive files and libtool archives for VH programs
          are removed
Type    : enhancement
Detail  : Archive files (.a) and libtool archives (.la) for VH programs
          are removed from development packages. These files are
          unnecessary because VH programs are dynamically linked with
          libraries.
          Archive files and libtool archives for VE programs are provided
          as before.

Summary : Changed the limit of VEOS core file size to 1GB.
Type    : enhancement
Detail  : Changed the limit of VEOS core file size from no-limit to 1GB.

Summary : Improved log messages of VEO.
Type    : enhancement
Detail  : VEO records the failure cause of veo_load_library() in a log file
          of VEO.

Summary : Fix the issue where VE thread is getting abort after activation of
          the new context.
Type    : bugfix
Detail  : VE thread is getting abort, after activation of the new context 
          by using swapcontext() if the new context is earlier modified
          with API makecontext().

Summary : Fix of issue where VE program performance may degrade
          if processes which are swapped out exist.
Type    : bugfix
Detail  : When processes which are swapped out by "Partial Process Swapping"
          exist at the time of creation of a process or a thread, two running
          threads may be assigned the same core due to inadequate process
          creation algorithm.
          In this case, VE program performance degrades.
          User can check which core the thread is executed on by pidstat
          command.

Summary : Fix of issue where load rebalancing feature does not work
          when some processes are swapped out.
Type    : bugfix
Detail  : When threads more than the number of cores are running on VE,
          the performance of VE program is decreased remarkably.
          At this time, even if the number of running threads is decreased
          less than the number of cores by swap-out of "Partial Process
          Swapping", load rebalancing feature does not work and performance
          of VE program is not improved.

Summary : Fix of issue where clock_gettime() fails if errno is already set
Type    : bugfix
Detail  : When a program which is compiled with '-no-proginf' option invokes
          the first clock_gettime() with non-zero errno, the clock_gettime() 
          will fail.

Summary : Fix the issue where VEO may fail to load a shared library.
Type    : bugfix
Detail  : veo_load_library() fails to load a shared library if never
          referenced symbol cannot be resolved.

Summary : Fix of issue where memory is leaked at VH side
Type    : bugfix
Details : Small memory may be leaked at VH side when a VE MPI process 
          transfer data between processes on other VE nodes.


2.4.3
This section describes changes between the 2.4.1 and 2.4.3 versions of VEOS.

Summary : Fixed an abort issue of VEOS during system call handling
Type    : bugfix
Detail  : VEOS may detects unintended timeout and aborts, when it tries
          to start a VE core after it handles a system call request
          from VE program. When VEOS aborts, running VE processes also
          terminate abnormally.


2.4.1
This section describes changes between the 2.4 and 2.4.1 versions of VEOS.

Summary : Supported ftrace feature through VEO.
Type    : enhancement
Detail  : When following conditions are established, ftrace.out file is
          generated by ftrace runtime libraries.
          - A user link and compile a VE program with "-ftrace" option.
          - VEO program calls veo_proc_destroy().
          Please see VEOS document "The tutorial and API reference of
          veoffload" for detail.

Summary : Supported new VEO APIs which can specify stack size of VEO context.
Type    : enhancement
Detail  : VEO supports new APIs which can specify stack size of VEO context
          as attribute. User can create a VEO context which has a specified
          sized stack by using the APIs. Please see VEOS document "The tutorial
          and API reference of veoffload" for detail.

Summary : Changed runtime library search path of veorun.
Type    : enhancement
Detail  : veorun is an executable for VE, and VEO uses it to execute a VE 
          function. The runtime library search path of veorun is changed to 
          /opt/nec/ve/lib so that VE shared library which user loads using 
          veo_load_library() does not depend on runtime libraries of specific
          version of 'ncc' and 'nfort' compiler.

Summary : Improved performance of clock_gettime() system call.
Type    : enhancement
Detail  : Improved performance of clock_gettime() with below clock id system 
          call. When a process or thread makes the request for system time 
          using clock_gettime() with below clock id, then first request will 
          be served using VH syscall. On subsequent requests, time will be 
          calculated at VE end instead of invoking VH syscall for same 
          thread-group.

          CLOCK_REALTIME
          CLOCK_REALTIME_COARSE
          CLOCK_MONOTONIC_COARSE
          CLOCK_MONOTONIC_RAW
          CLOCK_BOOTTIME
          CLOCK_THREAD_CPUTIME_ID

Summary : Updated VEOS scheduler to instantly schedule the runnable VE task 
          on VE core
Type    : enhancement
Detail  : Runnable VE task was not scheduled on the VE core until next 
          scheduler timer interval of VEOS scheduler. With this enhancement 
          VEOS scheduler will schedule the runnable VE task on VE core when 
          no other task is executing on VE core.

Summary : Updated the behaviour to abort the VE task when stack limit
          is exhausted.
Type    : enhancement
          VEOS is updated to abort the VE task with the message
          "Unable to grow stack" when stack limit of the VE task is
          exhausted.

Summary : Fix the issue where VE task stack can grow beyond the stack 
          limit.
Type    : bugfix
Detail  : VEOS allocates the stack area beyond the stack limit of VE 
          task if it requires the stack area which cannot be accommodated
          within the stack limit.

Summary : Fix the issue of failure of VEO process creation when a user executes
          a VEO program through the job scheduler.
Type    : bugfix
Detail  : When following conditions are established, VEO process creation may
          fail.
          - A user executes a VEO program through the job scheduler.
          - Above VEO program calls veo_proc_create_static().

Summary : Fixed the abort issue during VEOS shutdown.
Type    : bugfix
Detail  : VEOS aborts when VEOS tries to access data of the invalid/deleted
          task during shutdown.


2.4
This section describes changes between the 2.3 and 2.4 versions of VEOS.

Summary : Supported VH Call API for VE Fortran program
Type    : enhancement
          VH Call is a functionality which invokes a shared library function
          compiled for VH from VE process. User can invoke a function or
          subroutine in VH Fortran library or module by using the VH Call API.
          Please see VEOS document "The tutorial and API reference of
          libvhcall-fortran".


2.3
This section describes changes between the 2.2.2 and 2.3 versions of VEOS.

Summary : Changed RSS calculation algorithm of shared memory
Type    : enhancement
          When VE memory is shared between VE processes, VEOS divides the
          size of the shared memory between sharing processes. The divided
          values is counted to RSS(resident set size) of each process.

Summary : Added new environment variable VE_LIMIT_OPT to set resource limit 
          and support RSS limit 
Type    : enhancement
          The environment variable VE_LIMIT_OPT can be used to set resource
          limits of VE processes. Please see VEOS document "How to execute
          VE program" for detail.
          Memory allocation fails if a process exceeds RSS limit. 

Summary : Support of Partial Process Swapping
Type    : enhancement
Detail  : It provides a function that swapped out a part of the memory
          of a stopped VE process into HugePages reserved on the VH
          side and frees the VE memory.
          The freed VE memory is able to use from another program.
          It also provides a function that restores the memory swapped
          out to the VH side to the VE memory and returns the VE
          process to the state before the memory was swapped out.
          Please see VEOS document "VEOS Partial Process Swapping 
          Reference" for usage.

Summary : Functional enhancements of GDB
Type    : enhancement
Detail  : There are following functional enhancements.
          - The version of GDB is updated 7.12.1 from 7.11.1.
          - Some commands are added.
            Please see VEOS document "Difference Points for GDB".

Summary : Supported an environment variable, VE_ACC_IO
Type    : enhancement
Detail  : Users can change the IO-offloading-method of a process to
          Accelerated I/O by setting VE_ACC_IO=1. Users can also disable 
          Accelerated I/O when VE_ACC_IO is undefined or set to zero.

Summary : Added support to show VE process and its statistics created by
          VEO API using commands.
Type    : enhancement
Detail  : The command 'ps', 'top', 'pidstat', 'prtstat' and 'pmap' are
          modified to display VE processes which are executed using VEO API 
          called by a child thread.

Summary : Supported new data transfer APIs for VH Call
Type    : enhancement
Detail  : A VH thread spawned by a function which is executed by VH call can
          send/receive data to/from a memory of a VE thread which has invoked
          the function on VH side.

Summary : Fix the issue where VE GDB shows the main thread in execution
          instead of child thread during core file debugging.
Type    : bugfix
Detail  : During core file debugging in the VE GDB, the main thread
          information is displayed even when the child thread has caused
          process termination. It is because the VEOS always marks the
          parent thread information as the current thread in execution.

Summary : Fix the issue where child threads state is not changing to STOP('T')
          when main thread is in Zombie('Z') state and SIGSTOP signal is 
          delivered to main thread.
Type    : bugfix
Detail  : Child threads state in a thread group are not updated to STOP('T') 
          state when main thread is in Zombie('Z') state and SIGSTOP signal is 
          delivered to the main thread. 

Summary : Fix the issue that all signals were not delivered to a program
          using VEO
Type    : bugfix
Detail  : No signals were delivered to a program using VEO because all
          signals were masked after veo_proc_create().

Summary : Fix the issue that SIGCONT did not resume execution of a program
          executed by VEO.
Type    : bugfix
Detail  : VEOS is required to be notified of SIGCONT to resume execution from
          SIGSTOP. However, SIGCONT did not resume VE part in a program using
          VEO since libveo did not notify VEOS of SIGCONT.


2.2.2
This section describes changes between the 2.2 and 2.2.2 versions of VEOS.

Summary : Load Balancing of a VEO OpenMP program
Type    : enhancement
Detail  : VEO sets a thread affinity of a context thread automatically to
          avoid conflicts with an OpenMP thread when threads more than the
          number of VE cores are created. If you use a statically-linked
          veorun binary, please re-create the veorun by mk_veorun_static.

Summary : Supported VH function call on a VEO context thread
Type    : enhancement
Detail  : VEO now supports a new API function veo_call_async_vh() to execute
          a VH function on a VEO context thread.

Summary : Fix the issue where fork() system call in a multi-threaded VE
	  process hangs.
Type    : bugfix
Detail  : When a multi-threaded VE process invokes fork() system call and
	  simultaneously other threads are performing I/O using read() system
	  call where starting address or size of the VE buffer is not 8 byte
	  aligned, then fork() system call hangs.

Summary : Fix the issue that a VE function call with arguments narrower
          than 64 bit by VEO leads to undefined behavior.
Type    : bugfix
Detail  : The upper bits of integer arguments narrower than 64 bit is
          undefined because VEO passes integer arguments without signed
          or zero extension. A VE function call with such integer arguments
          leads to undefined behavior due to the undefined upper bits.


2.2
This section describes changes between the 2.1.3 and 2.2 versions of VEOS.

Summary : Improved instruction cache performance
Type    : enhancement
Detail  : Memory layout of VE processes is modified in order to improve 
	  instruction cache performance of VE core. It leads to better 
          performance of VE program.
          New memory layout needs more than or equal to 1024 bytes gap between 
          text section and data section which are defined in an executable or 
          a shared library. If the size of the gap is less than 1024 bytes, 
          loading fails with an error message, "Failed to validate the gap 
          between text/data".  In this case, please re-link the executable or 
          the shared library.  've_validate_binary' command can check the gap
          size. Please see the next topic for more information.

Summary : New command 've_validate_binary'
Type    : enhancement
Detail  : New command /opt/nec/ve/bin/ve_validate_binary is added.
          This command checks the size of the gap between text section
          and data section of an executable or a shared library.
          If the gap is less than 1024 byte, it shows a message, "DATA/TEXT 
          gap is less: <size>". 

Summary : Updated the value of si_code set during the invocation of signal
          handler routine corresponding to some of the HW exceptions.
Type    : enhancement
Detail  : si_code present in siginfo_t structure passed as an argument
          during the invocation of signal handler routine has been
          updated. Below is the updated list of si_code set corresponding 
          to HW exceptions :

          HW exceptions                         si_code
          Missing page exception                'SEGV_MAPERR'
          Memory access exception               'BUS_ADRALN'
          Host missing page exception           'SEGV_MAPERR'
          Host missing space exception          'SEGV_MAPERR'
          I/O access exception                  'BUS_ADRERR'
          Illegal instruction format exception  'ILL_ILLOPC'

Summary : The enhancement of VEO APIs not to specify VE node number explicitly
Type    : enhancement
          Users can specify -1 as the VE node number to veo_proc_create() or
          veo_proc_create_static(). If -1 is specified, a VE process is created
          on the default VE node (VE node '0'). If -1 is specified and
          environment variable VE_NODE_NUMBER is set, a VE process is
          created on the VE node specified by VE_NODE_NUMBER.

Summary : The enhancement of VEO APIs for the job scheduler
Type    : enhancement
Detail  : If a user executes a program which uses VEO APIs through the job
          scheduler, the VE node number specified by the program is treated as
          a logical number. It is translated into physical VE node number
          assigned by the job scheduler. For example, if the VE node number
          specified by the program is 0, and the job scheduler assigns VE
          node #4, #5 and #6, the VE process will be created on VE node #4.

Summary : Functional enhancements of GDB
Type    : enhancement
Detail  : There are following functional enhancements.
          - GDB can attach a VE process without the path of an executable
            binary.
          - GDB supports "target" and "target core" command.
          - GDB can use input/output redirection.

Summary : Checking the assignment of VE nodes by the job scheduler
Type    : enhancement
Detail :  VEOS checks the assignment of VE nodes by the job scheduler. If the
          job scheduler does not assign any VE node, execution of the VE
          program fails. If a user directly executes VE program without the job
          scheduler, it will be executed without checking the assignment.

Summary : Fix the issue where a new request is put in request queue 
          after exception occurs.
Type    : bugfix
Detail  : When the function called using VEO API made an exception occur, 
          the context can't continue to execute functions any more.
          After exception occurs, a new request issued is put 
          in request queue. If user wait the result of the request, 
          VEO API seems to be hanged because the new request 
          which is accepted by the context isn't executed.

Summary : Fix the issue where VE memory for exited orphan process is not
	  cleaned up if the parent VE process was executed by VE 'time'
	  command.
Type    : bugfix
Detail  : VE memory for exited child process is not cleaned up if the
	  parent VE process, executed by VE 'time' command, exits
	  before the child process.

Summary : Fix the issue where API related to locale returns error
	  when referring to the native environment.
Type    : bugfix
Detail  : The VE process using API related to locale doesn't recognize locale
	  correctly and returns error ENOENT when referring to the native
	  environment which is specified through LANG environment variable.
	  (eg. LANG=en_GB.UTF-8, LANG=en_US.UTF-8

Summary : Fix the issue that GDB can not show functions of glibc by 
          "backtrace" command
Type    : bugfix
Detail  : GDB can not show functions of glibc library correctly by
          "backtrace" command.

Summary : Fix the issue that GDB gets an incorrect vector register.
Type    : bugfix
Detail  : GDB shows an invalid value when GDB prints vector register, It is 
          because GDB does not deal with the value of the vector register
          correctly.

Summary : Fix the issue where usage of macro __FE_DENORM leads to
	  unexpected result.
Type    : bugfix
Detail  : Use of macro __FE_DENORM is causing unexpected result because
	  VE does not support denormal number. So, removing the support
	  of __FE_DENORM macro.


2.1.3
This section describes changes between the 2.1 and 2.1.3 versions of VEOS.
          
Summary : Supported performance improvement of gettimeofday() when 'timezone' 
          argument is specified
Type    : enhancement
Detail  : The API gettimeofday() invokes the system call on very first 
          call and invokes the function call which returns timezone in VE 
          side, on subsequent callings when 'timezone' argument is specified
          as an argument. That improves performance of gettimeofday().

Summary : Supported to call VEO API from a child thread on VH side.
Type    : enhancement
Detail  : VEO supports to call VEO API from a child thread on VH side
          and create a VE process. When a VE process is created from a child 
          thread on VH, VE DMA or VH-VE SHM is not supported.

Summary : Supported new VEO APIs which can set 16 bit and 8 bit signed and
          unsigned integer arguments.
Type    : enhancement
Detail  : VEO supports new VEO APIs which can set 16 bit integer/unsigned
          integer, 8 bit integer/unsigned integer.
          Because user can set veo_args to the integer types by using
          the VEO APIs, user can pass the four integer types to VE process.

Summary : Supported to use VE program written in Fortran(VEO).
Type    : enhancement
Detail  : VEO supports a library implemented in Fortran except a quadruple
          precision real number or a variable length character string as
          an argument or a return value.

Summary : Supported linking static libraries without exporting symbols (VEO)
Type    : enhancement
Detail  : Users can link static libraries without exporting symbols on
          creating a static veorun by the new '--link-nosym' option of
          'mk_veorun_static'. This enhancement reduces the memory consumption,
          and speeds up the starting and the symbol search of a program
          dependent on large libraries such as BLAS.

Summary : Improved VE process loading performance.
Type    : enhancement
Detail  : VE process loading functionality is optimized for faster loading.
	  Also updated VE process scheduling functionality to execute process
	  immediately if the assigned core is idle.

Summary : Updated PPID value in process accounting file to display PPID of a
	  new VE process as the 'PID of process' which created it.
Type    : enhancement
Detail  : The dump-acct command displays PPID as 'PID of process' which created
	  it instead of '1' for any new VE process which is executed with 
	  've_exec' or with any commands for VE (like taskset, prlimit, time
	  and strace for VE).

Summary : Fix the issue in system() API where the memory of the VE process is
	  not freed until the VH process created by system() is exited.
Type    : bugfix
Detail  : When VE process invokes system() API to execute a VH process in
	  background e.g. 'system("/bin/sleep 180 &")', the memory resources
	  of the VE process is not freed even after its exit, untill the
	  VH process created with system() exits.

Summary : Fix the issue in system() API when an input string represented by
          'command' argument may get corrupted.
Type    : bugfix
Detail  : When VE program invokes 'system(command)' then extra characters may
	  get appended in the string literal represented by 'command' which
	  leads to unexpected behaviour of given command.

Summary : Fix the issue in gettimeofday() when this API returns incorrect 
          'timeval' structure values if it is invoked after 1 hour of it's 
          previous call.
Type    : bugfix
Detail  : When VE program invokes gettimeofday() and subsequently invokes
          gettimeofday() again after the time frame of 1 hour is elapsed,
          the results in the 'timeval' structure returns garbage.

Summary : Fix the issue in delivering SIGALARM when timer expire happens during
          disabling the timer through setitimer() system call.
Type    : bugfix
Detail  : When VE process invokes setitimer() system call to disable the
          registered timer and at the same time timer also expires.
          In this case SIGALARM signal delivers to the VE process
          after returning from setitimer() system call. 
          This changes SIGALARM delivering so that it is delivered during 
          setitimer() system call.

Summary : Fix the issue of changing data which is read by VE AIO
Type    : bugfix
Detail  : When multiple ve_aio_read() is called at a time under one of following
          condition, some read data may be changed unexpectedly.
          - Starting address of buffer on VE is not multiple of 8
          - Size of buffer on VE is not multiple of 8

Summary : Fix of the issue where VEO programs with libveosinfo may terminate abnormally
Type    : bugfix
Detail  : VEO programs linked with 'libveosinfo', a library to get VE and VEOS
          information, may terminate abnormally due to a symbol conflict
          between 'libveosinfo' and 'libvepseudo', a library composing a
          pseudo process, used by VEO. To avoid such a conflict, symbols of
          internal functions and variables of 'libvepseudo' are now hidden.

Summary : Fix of issue where VEO user can not run veorun statically linked 
	  when user directories mounted with NOSUID.
Type    : bugfix
Detail  : VEO user can not execute a program with statically linked veorun 
	  if the underlying filesystem of the executable is mounted with 
	  "nosuid" mount option.

Summary : Fix the issue of stalling VEO request.
Type    : bugfix
Detail  : When the function called using VEO API made an exception occur,
          the context can't continue to execute functions any more.
          But, when race condition occurred in VEO library, calling the
          function using asynchronous VEO API, the context which made an
          exception occur may accept a new request.
          In that case, when you wait for a result using the request ID
          returned by the request, VEO API seems to be hanged
          because the new request which is accepted by the context
          isn't executed.

Summary : Fix the issue where permission of VE process stack mapping is set to
	  'PROT_WRITE'.
Type    : bugfix
Detail  : VE 'pmap' command shows the stack mapping permission of VE process as
	  'PROT_WRITE' instead of 'PROT_WRITE|PROT_READ'.

Summary : Fix the issue where process tracing using VE 'strace' command failed 
	  if execve() system call is called from traced process.
Type    : bugfix
Detail  : If execve() system call or any exec() family of functions are called 
          from traced VE process then 'strace' command failed with error as 
          "Bad address".

Summary : Fix the issue of compilation error while including header file 
          'strings.h' in the user program when compiling through 'nc++' 
          compiler with compilation
          option '-U__GNUC_MINOR__'.
Type    : bugfix
Detail  : When the header file strings.h is included in the user program and the
          program is compiled through nc++ compiler with compilation option
	  -U__GNUC_MINOR__ ,the compiler prompts error.

Summary : Fix the issue of warning or error occurring when program using VH Call
          is compiled.
Type    : bugfix
          When program using vh_call_args_alloc() is compiled as C program,
          warning is occurred. In case of specifying -std=c11 option or compiling
          as C++ program, error is occurred.


2.1
This section describes changes between the 2.0.3 and 2.1 versions of VEOS.

Summary : Supported NUMA mode
Type    : enhancement
Detail  : The partitioning mode of VE card (HW) is available, so VEOS supports 
          VEOS NUMA mode to control the partitioning mode. In the partitioning 
          mode, user can use VE card like NUMA.  Please see VEOS document 
          "How to execute VE program" for usage.

Summary : Supported VE Offloading framework (VEO).
Type    : enhancement
Detail  : VEO provides accelerator-style programming on VE. VEO controls the 
          execution of a VE process from VH main program. VEO enables to develop
          a program using both VEs and VH computing resources.
          Please see VEOS document "The tutorial and API reference of 
          veoffload".

Summary : Improvement VH Call API for passing arguments
Type    : enhancement
Detail  : VH Call is a functionality which invokes a shared library function
          compiled for VH from VE process. This improvement allows user to
          invoke a function passing any types and any number of arguments.
          Using the enhanced API, invoking a Fortran library function is
          available. Please see VEOS document "The tutorial and API reference
          of libsysve".

Summary : Supported "ldd" command of glibc for VE
Type    : enhancement
Detail  : ldd prints the shared libraries required by each
	  dynamically linked binary for VE architecture.

Summary : Supported Accelerated I/O with Infiniband environment
Type    : enhancement
Detail  : Accelerated I/O with Infiniband environment is supported. Please see 
          VEOS document "How to execute VE program" for usage.

Summary : Modified the functionality of multiple commands to use VE node '0'
	  when VE_NODE_NUMBER environment variable is not set.
Type    : enhancement
Detail  : VE node '0' is used by default when below listed commands are
	  executed without specifying any node using VE_NODE_NUMBER
	  environment variable.
	  - tload, top (irrespective of options)
	  - iostat, mpstat, pidstat, sadc, sadf, sar, vmstat, free
 	    (when executed with 'delay/interval/count’ options)
	  - accton (when executed with 'filename')
	  - sa (when executed with '--other-usracct-file/--other-savacct-file/
	        --other-acct-file' options)
	  - taskset, prlimit, time, strace (to launch a new process)

Summary : Improved VE and VH data transfer performance. 
Type 	: enhancement 
Detail 	: VE driver function which is a part of the data transfer between 
	  VE and VH is improved. By this enhancement, the performance of data 
	  transfer, like read()/write() system call, is improved.

Summary : Improvement of the log file name of VEOS to include VE node
          number
Type    : enhancement
Detail  : The log file name of VEOS is changed from veos.log.X to
	  veosN.log.X (where N is VE node number and X is sequential
	  number). The directory where log files are
	  stored is not changed from /var/opt/nec/ve/veos.

Summary : Removed the packages relating to musl-libc
Type    : enhancement
Detail  : The packages relating to musl-libc are removed because NEC
	  ended the support of musl-libc. The removed packages are
	  below:
	    musl-libc-ve musl-libc-ve-devel libsysve-musl
	    libsysve-musl-devel veos-musl-header
	  If they are installed on your system, please uninstall them.

Summary : Improved execve() system call to always set VE_NODE_NUMBER
	  environment variable for VE processes.
Type    : enhancement
Detail  : Updated execve() system call in order to export VE_NODE_NUMBER
	  environment variable to the new process even if envp, the third
	  argument, is passed as NULL in execve() syscall. The VE node
	  number in which the process is executing can be determined using
	  VE_NODE_NUMBER environment variable.

Summary : Updated libsysve header files for C++ programs
Type    : enhancement
Detail  : The header files, libvhcall.h, veaio.h, vedma.h and vhshm.h are 
          updated so that C++ user programs includes them.

Summary : Changed I/O buffer allocation in glibc
Type 	: enhancement 
Detail 	: File I/O API (fread()/fwrite()/etc.) get I/O buffer from heap instead 
          of anonymous page. 

Summary : Updated the algorithm to calculate start time, elapse time and
	  user time for VE process.
Type    : enhancement
Detail  : Improved the algorithm to calculate elapse time and user time in
	  units same as the VH. Also, start time of VE process is now
	  preserved across execve().

Summary : Updated the functionality of commands for VE to remove difference of 
  	  PPID value between the commmands output and getppid() system call.
Type    : enhancement
Detail  : Commands for VE were showing PPID as 1 for any new VE process executed
	  with 've_exec'. The commands 'top', 'ps' and 'prtstat' are updated
	  to display PPID of VE process as the 'PID of shell' which created it.
	  And the behavior is same for getppid() system call.

Summary : Fix the issue where data in file backed shared memory is not written
          back to the file.
Type    : bugfix
Detail  : Data of file backed memory which is mapped with 'MAP_SHARED' flag
          and 'PROT_WRITE' permission is not carried through to the underlying
          file on munmap() if the same area is mapped again with 'MAP_PRIVATE'
          flag and 'PROT_READ' prior to the munmap() syscall or prior to
          process exit.

Summary : Fix the issue where msync() syscall may fail for file backed memory
Type    : bugfix
Detail  : msync() syscall fails on file backed memory, if the file is
          mapped by mmap() with the first argument set to the valid address
          and one of below conditions is true.
          - The start address of the file backed memory is not 512MB aligned,
            the file backed memory is beyond 512MB boundary and the page
            size is 2MB.
          - The start address of the file backed memory is not 16GB aligned,
            the file backed memory is beyond 16GB boundary and the page
            size is 64MB.
          If the file is mapped by mmap() with the first argument set to NULL,
          the issue does not occur.

Summary : Fix the issue where mmap() request without MAP_FIXED flag and 
          at a user specified address may fail.
Type    : bugfix
Detail  : Memory mapping using mmap() syscall without MAP_FIXED flag fails if 
          the user specified address is not 512MB aligned for 2MB page size, or  
          not 16GB aligned for 64MB page size. 

Summary : Fix the issue where VE core dump file is created with wrong file
	  name when privileged user tries to create the core file at path "/".
Type    : bugfix
Detail  : When a privileged user tries to generate VE core dump file at path
	  "/" to capture core dump of VE process, VEOS creates the VE core file
	  with wrong name.

Summary : Fix of issue where program gives segmentation fault when setjmp() is 
          invoked in shared library.
Type    : bugfix
Detail  : If setjmp() is called from shared library, then one of the
	  VE register got updated unexpectedly due to which program gives
	  segmentation fault in further processing.

Summary : Fix the issue where "/opt/nec/ve/bin/pidstat -l" command gives
	  segmentation fault.
Type    : bugfix
Detail  : If VE "/opt/nec/ve/bin/pidstat -l" command made an attempt to
	  display process statistics for a zombie process then the command
	  terminates with segmentation fault.

Summary : Fix the issue where VE 'time' command fails if the executed VE
	  program invoked VH binary with execve() system call.
Type    : bugfix
Detail  : If a VE process created with VE 'time' command executes a VH
	  binary using execve() system call, 'time' command fails with
	  "No such process" error.

Summary : Fix the issue where accounting file shows the presence of a
	  'Dummy_task' which is not created by user.
Type    : bugfix
Detail  : If VE process accounting is enabled and VE 'time' command failed to
	  execute a new process, a 'Dummy_task' entry is captured in accounting
	  file although a task in that name was never created.

Summary : Fix the issue where accounting file shows "Dummy_task" entry when
	  VE 'time' command executes VH binary.
Type    : bugfix
Detail  : If VE 'time' command tries to executes a VH binary then it executes
	  successfully but VE accounting file captures a "Dummy_task" entry.
	  Hence the similar commands 'taskset', 'prlimit' and 'time' has been 
	  restricted to execute only VE binaries and VH binaries will not be 
	  executed directly using these commands.



2.0.3
This section describes changes between the 2.0.1 and 2.0.3 versions of VEOS.

Summary : Improvement of memory consumption in glibc
          for APIs which use internal buffer.
Type    : enhancement
Detail  : APIs which use internal buffer, like printf(), dprintf()
          etc, consume only 2MB page irrespective of VE binary's
          default pagesize. In comparison with previous version, the
          memory consumption for these APIs is reduced by 62MB in case
          the default pagesize is 64MB.

Summary	: Improvement of memcpy() performance
Type	: enhancement
Detail	: To improve the performance areas where vector memcpy() is used 
	  internally for copying/transfering of smaller size data. 
	  Example of some of the  APIs where performance will be enhanced 
	  are fread() , fwrite() , strcpy() , stpcpy() , strncat() ,
	  strcat() etc.

Summary	: Improvement of memory consumed by system()
Type	: enhancement
Detail	: To overcome the limitation of consuming VE memory during execution of
          VH program through system(),  request will be served in VH. User can
          now execute a VH program through system() at VE even with limited
          memory.

Summary : Support of openat()  version limitation in glibc
Type    : enhancement
Detail  : Updated the handling in library to set the permissions to a hard link 
          file created using 'linkat()' when its target(oldpath) is a symbolic
          link file descriptor returned while opening a file using 'openat()' 
          with flags combination 'O_TMPFILE | O_RDWR' and the required mode.

Summary : Fix of the issue where VEOS performance degrades when an attempt
	  is made to read VE process registers.
Type    : bugfix
Detail  : When an attempt is made to read VE process registers using 
          ve_get_regvals() which is included in libveosinfo then VEOS 
          proformance degrades significantly.

Summary : Fix the issue where sched_setaffinity() system call or taskset may
          causes segmentation fault in multithreaded VE environment.
Type    : bugfix
Detail  : In multithreaded VE environment when VE task is migrated from one VE
          core to another VE core either by using sched_setaffinity() system
          call or by taskset command, memory/address translation related context
          for VE task are not getting restored properly to the newly migrated VE
          core, this causes segmentation fault(SIGSEGV) for VE task.


2.0.1

Summary : Support of glibc for VE
Type    : enhancement
Detail  : glibc for VE is available. Please see VEOS document 
          "How to execute VE program" and "Difference Point for Glibc-libc"
          for additional information.

Summary : Support of Accelerated I/O
Type    : enhancement
Detail  : "Accelerated I/O" improves I/O performance by efficient data transfer 
          between VE and VH.This feature is implemented in 'libveaccio'.
          Accelerated I/O is enabled when this library is loaded at runtime.
          Please see VEOS document "How to execute VE program" for usage.

Summary : Support of NON-ATOMIC-IO on VE architecture
Type    : enhancement
Detail  : All read/write family and send/recv family system call handlers 
          (except send/recv using struct msghdr and mmsghdr) have been enhanced 
          to support I/O operations in non atomic mode. In non atomic mode I/O
          if the requested I/O size is greater than 64MB, the I/O operation will
          be broken into multiple fix I/O each of size 64MB. This non atomic I/O 
          feature will reduce the memory footprint at VH side.

Summary : Fix of issue where ve_exec may terminate abnormally with SIGSEGV
Type    : bugfix
Detail  : When VE process is running in multithreading environment and a VE 
          thread invokes exit_group(), exit_group() procedure unmaps a memory 
          region, used for tracing status of VE task in ve_exec process.
          If at the same time another thread tries to access the mapped region,
          segmentation fault will occur.

Summary : Fix of the issue where VE process hangs during ve_get_regvals()
Type    : bugfix
Detail  : VE task is never scheduled on VE core due to some wrong VE task 
          handling at VEOS while serving ve_get_regvals(). As a result VE 
          process seems to be hanged.

Summary : Fix of the issue where redundant entries are added to external
	  variable "environ" when execve() syscall is invoked.
Type    : bugfix
Detail  : When VE program invokes execve() recursively to load VE binary,
	  redundant entries of some environment variables like LOG4C_RCPATH,
	  VE_EXEC_PATH etc. gets added to global extern variable "environ".
	  This may lead to failure of execve() syscall when the total number
	  of environment variable becomes large.

Summary : Fix the issue where VE 'sadc' command do not exit.
Type    : bugfix
Detail  : VE 'sadc' command hangs due to incorrect HW data file parsing.
	  Therefore, 'sadc' processes executed through cron job at
	  intervals run indefinitely.

1.3.2

Summary : Performance improvement in write() family syscall.
Type    : enhancement
Detail  : Updated the system call handling for reading the data from VE
	  memory to improve the performance of write() family syscall like
	  write(), writev(), pwrite() and pwritev().

Summary : Improved VE and VH data transfer performance.
Type    : enhancement
Detail  : The management function of VH memory for data transfer which 
	  VE driver offers is improved. By the improvement which is for
	  VH memory management list, the performance of data transfer
	  between VE to VH, like read()/write() system call, is improved.

Summary : Improved log messages of VE AIO.
Type    : enhancement
Detail  : Improved log messages. When a process is aborted by a VE AIO error,
          an error message is printed to standard error (stderr).

Summary : Fix of the issue where VEOS aborted while scheduling vforked
	  VE process.
Type    : bugfix
Details : The VE task struct of vforked VE process is not properly
	  populated at VEOS. Due to this during scheduling of vforked child
	  VEOS aborted.

Summary : Fix of the issue where vforked VE process remains in zombie state.
Type    : bugfix
Details : VE process remains in zombie state as deadlock occurred in VEOS when
	  vforked child VE process while exiting tries to wake up already
	  exiting parent VE process.

Summary : Fix the issue where VE process got hanged when it made an attempt to
	  execute signal handler on alternate stack in cascaded manner.
Type    : bugfix
Details : Due to improper reading of core register VEOS wrongly assumed process
	  is not executing on alternate stack. This lead to undefined
	  behaviour.

Summary : Fix the issue where VE process got SIGSEGV while trying to reduce
          heap below heap start address.
Type    : bugfix
Details : Due to wrong handling in brk() syscall TLS area mapped by libraries
          is unmapped, which results in VE process termination with SIGSEGV.

Summary : Fix the issue where 'freeram' field requested by sysinfo() system
	  call is not updated properly.
Type    : bugfix
Details : VE process gets wrong value of freeram (amount of free memory)
          because sysinfo() system call returns value which is not updated
          properly.

Summary : Fix for the issue where VE process cleanup did not occur even if it
	  has invoked pthread_exit().
Type    : bugfix
Detail  : VE process cleanup was not done properly when SIGCONT signal was
	  delivered to exiting task. So, the resources corresponding to VE
	  task was not released.

Summary : Fix the issue where VE strace command failed to execute VE process 
	  correctly when VE process stack is grown.
Type    : bugfix
Detail  : VE strace command can not trace grow() system call which performs
          VE process's stack growing, so VE strace gives undefined behavior.

1.3

Summary : Improved performance of clock_gettime() and gettimeofday()
	  system calls
Type    : enhancement
Detail  : Improved performance of clock_gettime() with 'CLOCK_MONOTONIC' clock 
          id and gettimeofday() system calls. When a process or thread makes 
          the request for system time using gettimeofday() or monotonic time 
          using clock_gettime(), then first request will be served using VH 
          syscall. On subsequent requests, time will be calculated at VE end 
          instead of invoking VH syscall for same thread-group.

Summary : Supported function to do Asynchronous I/O for VE(VE AIO)
Type    : enhancement
Detail  : Asynchronous I/O operation for VE is supported. 'libsysve' library
          includes VE AIO APIs. VE programs can do their own tasks while data
          transfer between VE and VH, and actual I/O are done asynchronously.

Summary : Added print messages to stderr during failure in loading
	  to help user analyse the cause of failure.
Type    : enhancement
Detail  : Additional print messages have been added to stderr in case
	  of failure during loading. This will provide helpful
	  information to user regarding failure in loading an executable.

Summary : Fix of issue where VE process may terminate abnormally with SIGBUS
Type    : bugfix
Detail  : VE process may terminate abnormally with SIGBUS when user puts a
          futex variable on bss area of a shared library.

Summary : Fix of issue where VE process may terminate abnormally with SIGFPE
Type    : bugfix
Detail  : VE process may terminate abnormally with SIGFPE when user invokes
          mprotect() system call with NULL address as an argument.

Summary : Fix of issue where a VE Thread may hang indefinitely.
Type    : bugfix
Detail  : Thread would hang indefinitely in a scenario wherein the thread
	  (created using pthread_create) tries to join an already exited parent
	  process (parent process is a related process created using fork).

Summary : Fix of issue where write() family system calls are sometimes
          unsuccessful.
Type    : bugfix
Detail  : write() family system calls sometimes fail if fork()/vfork()/system()
          is invoked in parallel by other thread. The system calls mean 
          write(), writev(), pwrite() and pwritev().

Summary : Fix for the issue where signal mask and pending set of a thread are
	  not preserved across execve().
Type    : bugfix
Detail  : Signal mask of thread is not preserved across execve() i.e. if a
	  thread has blocked a signal and does execve() then for the newly
	  loaded process signal will not be masked.
	  Also the signal pending for VE process at veos are not preserved
	  across execve().

Summary: Fix of issue where VE process returns wrong information of being
	 executing over alternate stack, even though it is not executing on
	 alternate stack.
Type    : bugfix
Detail  : The stack information maintained at VEOS is not latest after VE
          process executing the signal handler over alternate stack does
	  longjump() to return to normal stack. Due to this sigaltstack()
	  syscall returned wrong information of still executing over alternate
	  stack.

Summary : Fix of issue where swprintf() returns wrong value for '%lc'
	  format specifier
Type    : bugfix
Detail  : swprintf() returns -1 instead of number of bytes written when used
	  with format specifier '%lc'(wide characters).

Summary : Fix of issue where user process consumes 64MB memory instead
          of 2MB for dynamically loaded data used by musl-libc
Type    : bugfix
Detail  : When user uses APIs like localtime() with binary compiled with 64MB
          alignment, then memory consumed internally by library for zoneinfo
          data present in path "/usr/share/zoneinfo/*" is 64MB although actual
          requirement is less than 2MB.

Summary : Fix of issue where timer_create() system call returned incorrect 
	  values instead of returning -1 for Process/Thread CPU clock id.
Type    : bugfix
Detail  : When timer_create() system call is invoked with clock_id obtained from
	  clock_getcpuclockid()/pthread_getcpuclockid(), it doesn't fail with
	  errno as EINVAL. (timer_create() for VE doesn't support Process/Thread
          CPU clock id.)

Summary : Fix of issue where clock_nanosleep() system call may sleep for an
	  indefinite time instead of returning -1 for Process/Thread CPU
	  clock id.
Type    : bugfix
Detail  : When clock_nanosleep() system call is invoked with clock_id obtained
	  from clock_getcpuclockid()/pthread_getcpuclockid(), it doesn't fail
	  with errno as EINVAL. (clock_nanosleep() for VE doesn't support 
          Process/Thread CPU clock id.)

Summary : Fix of issue where log rotation of accounting file fails if process
	  accounting for VE has never been enabled.
Type    : bugfix
Detail  : When SELinux is enabled, the logrotate invoked by 'cron.daily' failed
          to rotate VE accounting file (Only if accounting is never enabled) 
          because of wrong context of directory "/var/opt/nec/ve/account" which
          should be "acct_data_t" instead of "var_t".

1.2.2

Summary : Increased maximum number of arguments and environment variables
          allowed during loading and execve system call.
Type    : enhancement
Detail  : The maximum number of arguments and environment variables allowed
	  during loading and execve() system call have been increased from 256
	  to 512.

Summary : New API of libveosinfo to get user registers
Type    : enhancement
Detail  : New API named ve_get_regvals() is added to libveosinfo. This API
          can be used to get user registers of a VE process from a VH process.
          'veosinfo-devel' package is required to build your program with
          libveosinfo.

Summary : Fix of issue where VEOS terminated abnormally when thread creation
          request failed at VEOS.
Type	: bugfix
Detail  : If thread creation request from main process created by ve_exec
	  fails at VEOS, it may result in abnormal VEOS termination while
	  cleaning up the partially created VE task as certain uninitialized
	  fields were being accessed.

Summary : Fix of issue where VE process got killed while executing signal
	  handler.
Type    : bugfix
Detail  : VE process terminates abnormally while executing signal handler
	  as VEOS sets unaligned memory address for DMA while creating stack
	  frame of signal handler.

Summary : Fix of issue where /dev/veslotN is removed on update
Type    : bugfix
Detail  : A link /dev/veslotN was removed unexpectedly when a "change" action
	  was triggered. The "change" action is triggered by 'udevadm trigger'
	  when some RPM packages are updated.

Summary : Fix of issue whare updating 'veos' package gets stuck
Type    : workaround
Detail :  Updating 'veos' package got stuck under certain conditions because
          the old version of 'veos' package restarts 'systemd-binfmt' and it
          never finishes due to the problem relating to autofs.

Summary : Fix of issue where top/mpstat/pidstat commands show wrong
	  user and idle percentage.
Type    : bugfix
Detail  : 'top' command shows wrong user and idle percentage in %Cpu(s) field
	  of default view. Also 'mpstat' and 'pidstat' commands display wrong
	  %user and %idle, if executed without interval/count.

Summary : Fix of issue where 'prtstat' command shows wrong values in some
	  output fields.
Type    : bugfix
Detail  : 'prtstat' command shows incorrect data in pgrp, tty_nr, session,
	   tpgid, num_threads, exit_signal fields.

Summary : Fix of issue where clock_gettime() system call set incorrect
          error number.
Type    : bugfix
Detail  : clock_gettime() system call failed with errno set to EFAULT instead
	  of EINVAL when an invalid clock_id is passed.
	  Also, when clock_id corresponds to INIT process's clock, then
	  failure is returned with errno set to EINVAL, as VEOS does not have
	  an executing INIT process.


1.2.1

Summary : Load rebalancing feature added to improve the performance of VEOS.
Type    : enhancement
Detail  : With load rebalancing feature support, VEOS will relocate a VE task
	  from a VE core which has two or more VE task to the VE core which
	  has no task. This will improve the performance of multi-processes
	  and multi-threads programs including MPI.

Summary : Improved I/O performance
Type    : enhancement
Detail  : The I/O performance for simultaneous access from many processes is
          improved by DMA transfer improvement.

Summary : Fix of issue where VE user cannot run their programs when user
	  directories mounted with NOSUID
Type    : bugfix
Detail  : VEOS cannot execute a program or use a program with execve() if the
	  underlying filesystem of the executable is mounted with "nosuid"
	  mount option.

Summary : Fix of issue where clock_gettime() system call filled wrong
          timespec values in buffer provided.
Type    : bugfix
Detail  : clock_gettime() system call will always fill the execution time of
          the calling process even when the "clock_id" returned by
          clock_getcpuclockid() corresponded to some other process.

Summary : Fix of issue where parent resumes execution before its vforked child
          has exited.
Type    : bugfix
Detail  : VE program will get undesired result of wait() syscall when parent
	  resumes execution before its vforked child has exited.

Summary : Fix of issue where VE program having multiple threads terminates
          abnormally while invoking malloc() and free() in parallel
Type    : bugfix
Detail  : VE program having multiple threads which invokes malloc() and
          free() in parallel terminates abnormally due to protection issue
          of memory management data maintained by musl-libc.

Summary : Fix of issue where mmap() system call get wrong error codes
Type    : bugfix
Detail  : VE program will get wrong error codes in certain failure cases of
          mmap() system call i.e. if invalid size and invalid fd is passed to
          mmap() then errno EBADF is to be set but before the fix errno EINVAL
          was set and if MAP_FIXED flag is passed with NULL address to mmap()
          then errno EPERM is to be set but before the fix ENOMEM was set.

Summary : Fix of issue where getresgid() system call get wrong error code
Type    : bugfix
Detail  : getresgid() return EFAULT unexpectedly because one of the argument
          from expected argument list was missing while processing syscall
          on VEOS.


1.2

Summary : Improved DMA transfer for NEC system software
Type    : enhancement
Detail  : The performance of DMA transfer for NEC system software which
          is linked to VE programs, such as ScaTeFS library and so on, is
          improved. It is a dedicated function for NEC system software;
          therefore, NEC doesn't support any problem when you use this
          function directly without NEC system software.

Summary : Response improvement of VEOS about memory release request
          from a VE process.
Type    : enhancement
Detail  : The response of releasing memory request is improved because
          VEOS clears released physical memory asynchronously.
          When VEOS doesn't have enough cleared physical memory to allocate,
          VE process is kept waiting for completion of clearing memory.

Summary : Improved data-transfer performance and reduced memory consumption
Type    : enhancement
Detail  : The performance of large size data transfer done via system call
	  (read(), write() and so on) is improved.

Summary : License change of libvepseudo to LGPL
Type    : enhancement
Detail  : The license of libvepseudo which is one of components of Pseudo
          process is changed from GPL to LGPL.

Summary : Fix of issue where VE process terminates abruptly
Type    : bugfix
Detail  : VE program execution may terminate abruptly while doing vfork()
          when the caller has already mapped a file on memory of size zero,
          which restarts veos unexpectedly and terminates of all the VE
          processes executing on that VE node.

Summary : Fix of issue where VEOS virtual memory usage keeps on increasing.
Type    : bugfix
Detail  : When VE process creates coredump then virtual memory usage of VEOS
	  increases gradually. However, virtual memory usage is not restored
	  to original amount even after coredump creation was over.

Summary : VE process did not receive SIGSEGV signal even though the hardware
	  exception "host missing page exception" occurred on VE.
Type    : bugfix
Detail  : VE process will not be terminated with expected signal(SIGSEGV) and
	  can continue its execution.

Summary : Fix for issue where VE child process creations using fork() fails.
Type    : bugfix
Detail  : Once a VE process invokes sched_setaffinity with invalid CPU_SET
          every subsequent invocation of fork() system call fails.

Summary : Fix of issue where psacct-ve service failed when VH boots.
Type    : bugfix
Detail  : VE 'psacct-ve' service depends upon running VEOS but, on VH reboot,
          this service gets restarted before VEOS restarts
          (if service is enabled) leading to the failure in restart of
          'psacct-ve' service.

Summary : Fix the issue where count of VE blocked processes was wrong for
          vmstat and sar command.
Type    : bugfix
Detail  : VE specific "vmstat" and "sar" command were displaying some count of
          blocked process but VEOS doesn't maintain any such state which can
          provide count of 'blocked' processes (process waiting specifically
	  for IO). Therefore, blocked process count should be 0.


1.1.1

Summary : Fix of issue where VEOS aborted during execve() processing if the
	  task is killed by any signal
Type    : bugfix
Detail  : During execve() processing, if the task is killed by any signal,
          VEOS fails to update a task struct flag which lead to removing of
          already removed task from core. It resulted in veos abort.

Summary : Fix of issue where VEOS aborted when SIGKILL to thread group leader
	  was sent during execve()
Type    : bugfix
Detail  : While VEOS is handling execve() request from a thread and serving
	  SIGKILL signal for the thread group leader at the same time,
	  VEOS aborts.

Summary : Fix of issue where VEOS consumes a huge VH memory
Type    : bugfix
Detail  : VEOS consumes a huge VH memory when VEOS creates a core dump file
          of a VE process whose memory segment size is huge.

Summary : Fix of issue where VEOS may show undefined behavior due to loss
          of synchronisation while updating its data structures.
Type    : bugfix
Detail  : VEOS can show undefined behaviour due to loss of synchronisation.
	  This can occur while, setting of VE process's CPU affinity is
          ongoing in parallel with some other request ongoing for same VE
          process at VEOS.

Summary : Fix of issue where DMA descriptor table was wrongly updated for
          VE process
Type    : bugfix
Detail  : VE program which is doing DMA transfer sometimes will get wrong
          content of DMA descriptor table as migration was not done
          properly by VEOS.

Summary : Fix of issue where VE program may return fork() failure even if child
	  process is created successfully
Type    : bugfix
Detail  : Due to a race scenario in fork() handling, even if child process
	  is created successfully, parent may return fork() failure as EAGAIN

Summary : Fix of issue where a VE process may hang indefinitely.
Type    : bugfix
Detail  : A VE process may hang indefinitely as it is not being scheduled on
          core.

Summary : Fix of issue where VE program terminates abnormally
Type    : bugfix
Detail  : VE program terminates abnormally while executing signal handlers
          due to memory corruption done by VEOS while creating stack frame
          of signal handler.

Summary : Fix of issue where memory is leaked at VH side
Type    : bugfix
Details : Memory is leaked at VH side when a VE process creates a child
          process and the child process terminates. When the parent VE
          process terminates, leaked memory is freed.

Summary : Fix of issue where VE process execution becomes slow
Type    : bugfix
Details : After executing multiple VE process, VEOS skips scheduling decision
          in some cases due to inconsistent state of its core's data structure.
          Due to this performance of VE process degrades.

Summary : Fix of issue where GDB backtrace command
Type    : bugfix
Detail  : The "backtrace" command of GDB does not display the frame
          which is interrupted by signal.

Summary : Improved privileged DMA transfer performance
Type    : enhancement
Detail  : The performance of privileged DMA transfer for VEOS is improved.
	  It improves performance of system call(read()/write()) and etc.

Summary : Supported function to improve data-transfer rate of libraries such as
          MPI etc.
Type    : enhancement
Detail  : To improve data-transfer rate of the MPI library or other system
          libraries, VEOS provides a function which allows VE program to access
          to System V shared memory on VH. These libraries create System V
          shared memory using "huge pages". This function is used only by
          appropriate MPI library or other system libraries. And NEC doesn't
          support any problem when you use this function directly without these
          libraries.

Summary : Improved context switch performance
Type    : enhancement
Detail  : The performance of a context switch between VE processes/threads is
          improved.

Summary : Improved VE process core dump
Type    : enhancement
Detail  : Improved core dumping performance of VE process. Earlier VE core
	  dumping was taking longer time in certain scenarios when large I/O
	  is in progress on VH host. During that duration all the threads of
	  the thread group remain in uninterruptible sleep. This duration is
	  reduced now.

Summary : Support of the system activity data collection and store by sar
Type    : enhancement
Detail  : The system activity data collection and store by sar is available.
          Updated VE sysstat service from 've_sysstat' to 've_sysstat@'.
          (where N is VE node number)

Summary : Display "VEOS RESTART" instead of "LINUX RESTART" in message of
	  'sar' command
Type    : enhancement
Detail  : Whenever VEOS is restarted then output messages from 'sar' command
	  will show "VEOS RESTART" instead of "LINUX RESTART".

Summary : Porting of 'ipcs and ipcrm'
Type    : enhancement
Detail  : Added support of 'ipcs' and 'ipcrm' commands in 'util-linux-ve'
	  package.


1.0.3

Summary : RHEL7.4/x86_64 support
Type    : enhancement
Detail  : RHEL7.4/x86_64 is newly supported. Please see README for Supported
          Platforms and Operating Systems.

Summary : Distribute binfmt configuration file
Type    : enhancement
Detail  : A configuration file for VE binary format (ve.conf) is stored
          to /usr/lib/binfmt.d/. A user can execute a VE program without
	  specifying ve_exec command. If multiple VE nodes exist, the VE
	  node which executes VE program is specified by environment
	  variable (VE_NODE_NUMBER).

1.0.2

Summary : Fix of issue where VE process is killed when a signal handler is
	  invoked
Type    : bugfix
Detail  : A VE process may be killed on executing a signal handler due to
	  insufficient stack space required for signal handler execution
          and frame setup

Summary : Fix of issue where VE process is hanged
Type    : bugfix
Detail  : VE program execution may stall while executing signal handler.
          This can happen in  rare race scenario when VE process consume
	  all of its stack and then signal is generated for the process.

Summary : Fix of issue where VE process terminates abruptly
Type    : bugfix
Detail  : VE program execution may terminates abruptly when parallel request
          of shmdt() and shmctl() system call arrives at veos for the same
          shared memory segment, which restarts veos unexpectedly and
          termination of all the VE processes executing on that VE node.

Summary : Fix of issue where pthread_create() fails if large TLS size is used
	  with user defined thread stack
Type    : bugfix
Detail  : With large TLS size and user defined stack area, pthread_create()
	  fails to set up stack for thread and returns EAGAIN.

Summary	: Fix the issue where "sar -m" with interval producing error
Type	: bugfix
Detail	: The "sar" command is showing error while trying to get sensor
	  information.

Summary : Signal delivery to VE task is not delayed until the execution of
	  kill(2) series system call.
Type    : enhancement
Detail  : When VE task sends signal to itself through kill(2) series system call
	  like tkill(2),tgkill(2) etc. The signals are immediately  delivered to
	  VE task.

Summary : Improve log messages of VEOS
Type    : enhancement
Detail  : Change log level of VEOS messages to applicable level.

Summary : Change package file name
Type    : enhancement
Detail  : TSUBASA standard package name rule are applied to all of
          VEOS package files.

1.0.1 - initial release
